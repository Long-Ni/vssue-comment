(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{443:function(v,_,a){v.exports=a.p+"assets/img/cpu_memory.c47da250.png"},444:function(v,_,a){v.exports=a.p+"assets/img/JMM.5bb42de3.png"},445:function(v,_,a){v.exports=a.p+"assets/img/instruction_reorder.15cf8451.png"},534:function(v,_,a){"use strict";a.r(_);var t=a(8),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("并发处理的广泛应用使得 Amdahl 定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类 “压榨” 计算机运算能力的最有力武器。")]),v._v(" "),t("blockquote",[t("p",[v._v("Amdahl定律：通过系统中并行化与串行化的比重来描述多处理器系统能获得的运算加速能力。")]),v._v(" "),t("p",[v._v("摩尔定律：描述处理器晶体管数量与运行效率之间的发展关系。")])]),v._v(" "),t("p",[v._v("这两个定律的更迭也代表了近年来处理器发展从追求频率到追求多核心并行处理的发展过程。")]),v._v(" "),t("p",[v._v("将通过以下内容来阐述 Java 是如何解决 "),t("strong",[v._v("并发编程中的两个关键问题")]),v._v("：")]),v._v(" "),t("ul",[t("li",[v._v("Java 内存模型")]),v._v(" "),t("li",[v._v("指令重排序")])]),v._v(" "),t("p",[v._v("目录：")]),v._v(" "),t("TOC",{attrs:{"include-level":[2,4]}}),v._v(" "),t("h2",{attrs:{id:"_1-幕后的故事"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-幕后的故事"}},[v._v("#")]),v._v(" 1. 幕后的故事")]),v._v(" "),t("p",[v._v("随着科技的进步，CPU、内存（Memory）、磁盘（Storage）都在不断的迭代，朝着更快的方向发展。但是有一个核心矛盾一直不能解决，就是三者的速度差异。")]),v._v(" "),t("p",[v._v("CPU 和 内存的速度差异可以形象的描述为：CPU 是天上一天，内存是地上一年。假设 CPU 执行一条指令需要一天的时间，那么 CPU 去读取内存的时间就是一年。内存和磁盘的速度差异更大：内存天上一天，磁盘地下十年。")]),v._v(" "),t("p",[v._v("程序中绝大部分运算任务都不可能只靠 CPU 计算完成，CPU 至少要与内存交互，如读取运算数据、存储运算结果等，这些 I/O 操作很难消除（无法仅靠寄存器完成所有的运算任务）。所以现在计算机系统都加入一层读写速度尽可能接近 CPU 运算速度的"),t("strong",[v._v("高速缓存")]),v._v("（"),t("strong",[v._v("Cache")]),v._v("）来作为 CPU 和内存之间的缓冲："),t("strong",[v._v("将运算需要使用到的数据从内存复制到缓存中，让运算快速进行，当运算结束后再从缓存同步到内存之中")]),v._v("。这样处理器就无需等待缓慢的内存读写了。")]),v._v(" "),t("p",[t("img",{attrs:{src:a(443),alt:""}})]),v._v(" "),t("p",[v._v("通过以上你觉得事情就变的完美了吗？并没有！它引入了一个新的问题："),t("strong",[v._v("缓存一致性（Cache Coherence）")]),v._v("。在多处理器系统中，每个处理器都有自己的高速缓存，而这些处理器又共享同一主内存（Main Memory）。当多个处理器的运算任务涉及到同一块主内存区域时，将可能导致各自的缓存数据不一致。为了解决一致性问题，需要各个处理器访问缓存时遵循一些协议。"),t("strong",[v._v("内存模型")]),v._v("就是在特定协议下，对特定的内存或高速缓存进行读写访问的过程抽象。")]),v._v(" "),t("h2",{attrs:{id:"_2-并发编程的两个关键问题-为什么需要-jmm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-并发编程的两个关键问题-为什么需要-jmm"}},[v._v("#")]),v._v(" 2. 并发编程的两个关键问题（为什么需要 JMM）")]),v._v(" "),t("p",[v._v("并发编程中两个关键问题：")]),v._v(" "),t("ol",[t("li",[v._v("线程之间如何通信。（通信：线程之间交换信息的机制。）")]),v._v(" "),t("li",[v._v("线程之间如何同步。（同步：线程之间操作发生相对顺序的机制。通俗的讲，当一个线程对某块内存进行操作时，其他线程都不可以对这块内存地址进行操作，直到该线程完成操作。）")])]),v._v(" "),t("p",[v._v("线程之间的通信机制有两种："),t("strong",[v._v("共享内存和消息传递。")])]),v._v(" "),t("ul",[t("li",[v._v("在共享内存并发模型中：\n"),t("ul",[t("li",[v._v("由于线程之间存在公共状态，通过写-读内存中的公共状态，所以线程间通信总是隐式进行。")]),v._v(" "),t("li",[v._v("程序员必须明确指定某段代码或某个方法需要在线程之间互斥执行，所以线程间同步总是显示进行。")])])]),v._v(" "),t("li",[v._v("在消息传递并发模型中：\n"),t("ul",[t("li",[v._v("由于没有公共状态，必须通过发送消息进行通信，所以线程间通信总是显示进行。")]),v._v(" "),t("li",[v._v("由于消息的发送必须在消息的接受之前，所以线程间同步总是隐式进行。")])])])]),v._v(" "),t("p",[v._v("Java 并发采用共享内存模型，由于线程间通信时隐时进行的，程序员完成感知不到，所以需要了解其机制，以防内存可见性的问题，从而编写正确的同步代码。")]),v._v(" "),t("p",[v._v("再讲内存可见性问题："),t("strong",[v._v("当一个线程更新共享变量的值后，其他线程没有及时的看到该共享变量最新的值")]),v._v("。")]),v._v(" "),t("p",[v._v("共享变量：代指实例域、静态域和数组元素。")]),v._v(" "),t("p",[v._v("局部变量、方法定义参数和异常处理器参数不会在线程之间共享，他们不会有内存可见性的问题，也不受内存模型影响。")]),v._v(" "),t("h2",{attrs:{id:"_3-java-内存模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-java-内存模型"}},[v._v("#")]),v._v(" 3. Java 内存模型")]),v._v(" "),t("h3",{attrs:{id:"_3-1-jmm-结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-jmm-结构"}},[v._v("#")]),v._v(" 3.1  JMM 结构")]),v._v(" "),t("p",[v._v("JVM 规范中定义了 Java 内存模型（Java Memory Model，JMM）。")]),v._v(" "),t("blockquote",[t("p",[v._v("（需要跟 JVM 内存模式区分开来，JVM 内存模式是 JVM 的内存分区。JMM 是一种虚拟机规范。）")])]),v._v(" "),t("p",[v._v("JMM 定义了线程和主内存之间的抽象关系：")]),v._v(" "),t("ul",[t("li",[v._v("线程之间的共享变量存储在主内存（Main Memory）中。")]),v._v(" "),t("li",[v._v("每个线程都有一个私有的本地内存（Local Memory），也叫工作内存（Work Memory）。不同线程无法访问对方的本地内存。")]),v._v(" "),t("li",[v._v("本地内存中存储了共享变量的副本。")]),v._v(" "),t("li",[v._v("线程对共享变量的所有操作都必须在本地内存中进行。")]),v._v(" "),t("li",[v._v("线程间共享变量值的传递必须通过主内存来完成。")])]),v._v(" "),t("p",[v._v("JMM 抽象结构示意图：")]),v._v(" "),t("p",[t("img",{attrs:{src:a(444),alt:""}})]),v._v(" "),t("p",[v._v("JMM 决定了一个线程对共享变量的写入何时对另一个线程可见。从上图来看，线程 A 和线程 B 之间通信的话，必须经历以下两个步骤：")]),v._v(" "),t("ol",[t("li",[v._v("线程 A 把本地内存 A 中更新过的共享变量的副本刷新到主内存的共享变量中去。")]),v._v(" "),t("li",[v._v("线程 B 到主内存中去读取线程 A 之前已经更新过的共享变量到本地内存 B 的共享变量的副本中。")])]),v._v(" "),t("p",[v._v("从整体来看，这两个步骤实质上是线程 A 在向线程 B 发送消息，而这个通信过程需要要经过主内存。JMM 通过控制主内存与每个线程的本地内存之间的交互，来为 Java 程序员提供内存可见性保证。")]),v._v(" "),t("p",[v._v("补充：")]),v._v(" "),t("p",[v._v("本地内存是 JMM 的一个抽象概念，并不实际存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。")]),v._v(" "),t("p",[v._v("这里的主内存、本地内存与 Java 堆、栈、方法区等并不是同一个层次的内存划分，这两者基本上没有任何关系，如果一定要勉强对应起来，主内存主要对应与 Java 堆中的对象实例部分，而本地内存则对应虚拟机栈中的部分区域。")]),v._v(" "),t("p",[v._v("JVM 采用内存模型的机制来屏蔽各个平台和操作系统之间内存访问的差异，以实现让 Java 程序员在各种平台下达到一致的内存访问效果。比如 C 语言中的整型变量，在有的平台中占用两个字节的内存，有的平台中占用四个字节的内存，Java 则在任何平台下，int 类型就是四个字节内存，这就是所谓的一致的内存访问效果。")]),v._v(" "),t("h3",{attrs:{id:"_3-2-内存间的交互操作、规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-内存间的交互操作、规则"}},[v._v("#")]),v._v(" 3.2 内存间的交互操作、规则")]),v._v(" "),t("p",[v._v("关于主内存和本地内存之间的交互协议（一个变量如何从主内存拷贝到本地内存、如何从本地内存同步回主内存之间的实现细节），JMM 定义了 8 种操作来完成。虚拟机实现时必须抱保证每一个操作都是原子的、不可再分的（double 和 long 类型变量例外，它们占用 8 个字节内存，在 32 位虚拟机和 64 位虚拟机中表现不同）。")]),v._v(" "),t("ul",[t("li",[v._v("lock（锁定）：作用于主内存变量，变量标识为线程独占状态。")]),v._v(" "),t("li",[v._v("unlock（解锁）：作用于主内存变量，变量从线程独占状态释放，以被其他线程引用。")]),v._v(" "),t("li",[v._v("read（读取）：作用于主内存变量，变量的值从主内存读取到本地内存中。")]),v._v(" "),t("li",[v._v("load（载入）：作用于本地内存变量，变量的值从本地内存载入到本地内存的变量副本中。")]),v._v(" "),t("li",[v._v("use（使用）：作用于本地内存变量，变量的值从本地内存的变量副本中传递给执行引擎。")]),v._v(" "),t("li",[v._v("assign（赋值）：作用于本地内存变量，变量的值从执行引擎赋值给本地内存的变量副本。")]),v._v(" "),t("li",[v._v("store（存储）：作用于本地内存变量，变量的值从本地内存存储到主内存中。")]),v._v(" "),t("li",[v._v("write（写入）：作用于主内存变量，变量的值从主内存写入到共享变量中。")])]),v._v(" "),t("p",[v._v("通过以上操作我们可以知道，一个变量从主内存复制到本地内存中，需要顺序的执行 read 和 load 操作；变量从本地内存同步回主内存，需要顺序的执行 store 和 write 操作。JMM 要求只以上两个操作顺序执行，没有要求连续执行。所以，对于两个变量 a 和 b 进行访问的时候可能会出现 read a、read b、load b、load a。除此之外，JMM 还规定在执行上述 8 种操作时必须满足的一些规则：")]),v._v(" "),t("ul",[t("li",[v._v("不允许 read 和 load、store 和 write 单独出现。")]),v._v(" "),t("li",[v._v("不允许线程丢弃 assign 操作，即变量在本地内存更新之后必须同步回主内存中。")]),v._v(" "),t("li",[v._v("不允许无原因（变量在本地内存中未更新）的把数据同步回主内存。")]),v._v(" "),t("li",[v._v("新的变量只能在主内存中“诞生”。")]),v._v(" "),t("li",[v._v("一个变量在同一时刻只允许一个线程对其进行 lock 操作，可以 lock 多次，当时需要同样次数的 unlock 才能解锁。")]),v._v(" "),t("li",[v._v("一个变量执行 lock 操作将会清空本地内存中此变量的值。")]),v._v(" "),t("li",[v._v("不允许 unlock 未被 lock 的变量，也不允许 unlock 一个被其他线程 lock 的变量。")]),v._v(" "),t("li",[v._v("一个变量执行 unlock 之前，必须先把变量同步回主内存中。")])]),v._v(" "),t("p",[v._v("通过以上 8 种内存访问规则以及 volatile 关键字的一些特殊规定，可以完全确定 Java 程序中哪些内存访问操作在并发下是安全的。由于这种定义相当严谨又十分繁琐，实践起来非常麻烦，所有有一个等效判断原则——Happens-before，用来确定一个访问在并发环境下是否安全。")]),v._v(" "),t("h3",{attrs:{id:"_3-3-happens-before-原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-happens-before-原则"}},[v._v("#")]),v._v(" 3.3 Happens-Before 原则")]),v._v(" "),t("p",[v._v("先行发生（Happens-before）原则是 JMM 中定义的两项操作之间的偏序关系。它可以用来指导并发编程的正确性。")]),v._v(" "),t("blockquote",[t("p",[v._v("通俗的说，操作 A 先行发生于操作 B，意思就是操作 B 发生之前，操作 A 产生的影响能被操作 B 观察到。")]),v._v(" "),t("p",[v._v("“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。")])]),v._v(" "),t("p",[v._v("通过一个例子来理解 Happens-before：")]),v._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 此操作线程 A 中执行")]),v._v("\ni "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 此操作线程 B 中执行")]),v._v("\nj "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 此操作线程 C 中执行")]),v._v("\ni "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),t("p",[v._v("假设两种情况，来分别分析变量 j 的值：")]),v._v(" "),t("ol",[t("li",[v._v("线程 A 和 B 已经启动，且线程 A 先行发生与线程 B，线程 C 还未启动；")]),v._v(" "),t("li",[v._v("线程 A、B、C 都已经启动，还是线程 A 先行发生与线程 B，但是线程 B 和 线程 C 之间没有先行发生关系；")])]),v._v(" "),t("ul",[t("li",[v._v("在情况 1 中，变量 j 的值必然为 5；")]),v._v(" "),t("li",[v._v("在情况 2 中，变量 j 的值不确定，5 和 8 都有可能，因为线程 C 的执行时间不确定，有可能在线程 B 之后，也有可能在线程 B 之前，更有可能在线程 A 之前。")])]),v._v(" "),t("p",[v._v("以下是 JMM 定义的 “天然的” 先行发生关系，这些先行发生无须任何同步器协助就已经存在，在代码中中默认直接使用。如果两个操作之间的关系不在此列，并且无法通过以下规则推导出来，就没有顺序性保证，虚拟机就可以对他们进行随意排序。")]),v._v(" "),t("ul",[t("li",[v._v("程序次序规则："),t("strong",[v._v("同一线程")]),v._v("内，前面的操作先行发生于后面的操作。")]),v._v(" "),t("li",[v._v("管程锁定规则：unlock 操作先行发生于同一个锁的 lock 操作。即，就是无论单线程还是多线程环境，对"),t("strong",[v._v("同一个锁")]),v._v("来说，一个线程对这个锁解锁之后，另一个线程获取了这个锁能看到前一个线程的操作结果。")]),v._v(" "),t("li",[v._v("volatile 变量规则：对于一个 volatile 变量的写操作先行发生于对这个变量的读操作。")]),v._v(" "),t("li",[v._v("线程启动规则：Thread 对象的 start() 方法先行发生于此线程的任何其他动作。")]),v._v(" "),t("li",[v._v("线程终止规则：线程中的所有操作先行发生于对此线程的终止检测方法。通过 Thread.join()、Thread.isAlive() 等手段检测线程已经终止执行。")]),v._v(" "),t("li",[v._v("线程中断规则：Thread 对象的 interrupt() 方法先行发生于 Thread.interrupted() 方法。Thread.interrupted() 方法用于检测线程是否被中断。")]),v._v(" "),t("li",[v._v("对象中介规则：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize() 方法的开始。")]),v._v(" "),t("li",[v._v("传递性：如果操作 A 先行发生于 操作 B，操作 B 先行发生于 操作 C，那么 操作 A 先行发生于操作 C。")])]),v._v(" "),t("p",[v._v("结论：时间先后顺序与先行发生原则基本没有太大的关系，所以衡量并发问题的时候不要受到时间顺序的干扰，一切必须以先行发生原则为准。")]),v._v(" "),t("h2",{attrs:{id:"_4-指令重排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-指令重排序"}},[v._v("#")]),v._v(" 4. 指令重排序")]),v._v(" "),t("p",[v._v("在 Java 内存模型的幕后故事中，我们了解到为了解决处理器与内存之间速度差异问题，引入了高速缓存（Cache）。其实，除了增加高速缓存之外，为了使处理器内部的运算单元尽可能被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化。处理器会在计算之后将乱序执行的结果重组，保证该结果和顺序执行的结果是一致的。")]),v._v(" "),t("p",[v._v("与处理器乱序执行优化类似，JVM 的即时编译器中也有类似的指令重排序（Instruction Reorder）优化。")]),v._v(" "),t("h3",{attrs:{id:"_4-1-三种重排序的场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-三种重排序的场景"}},[v._v("#")]),v._v(" 4.1 三种重排序的场景")]),v._v(" "),t("p",[v._v("编译器和处理器为了优化程序性能而对指令序列进行重新排序。三种重排序类型：")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("编译器优化的重排序")]),v._v("。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。")]),v._v(" "),t("li",[t("strong",[v._v("指令级并行的重排序")]),v._v("。现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。")]),v._v(" "),t("li",[t("strong",[v._v("内存系统的重排序")]),v._v("。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。")])]),v._v(" "),t("h3",{attrs:{id:"_4-2-指令重排序的原则-as-if-serial-语义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-指令重排序的原则-as-if-serial-语义"}},[v._v("#")]),v._v(" 4.2 指令重排序的原则：as-if-serial 语义")]),v._v(" "),t("p",[v._v("串行（as-if-serial）语义：不管怎么重排序，单线程内程序的执行结果不能被改变。编译器、Runtime 和处理器都必须遵守 as-if-serial 语义。")]),v._v(" "),t("p",[v._v("为了遵守 as-if-serial 语义，"),t("strong",[v._v("编译器和处理器不会对存在数据依赖关系的操作做重排序")]),v._v("，因为这种操作会改变执行结果。")]),v._v(" "),t("h4",{attrs:{id:"_4-2-1-数据依赖性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-数据依赖性"}},[v._v("#")]),v._v(" 4.2.1 数据依赖性")]),v._v(" "),t("p",[v._v("两个操作访问同一个变量，且这两个操作中有一个为写操作，此时两个操作之间存在数据依赖性。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("名称")]),v._v(" "),t("th",[v._v("代码实例")]),v._v(" "),t("th",[v._v("说明")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("写后读")]),v._v(" "),t("td",[v._v("a = 1;"),t("br"),v._v("b = a;")]),v._v(" "),t("td",[v._v("写一个变量后，再读这个变量")])]),v._v(" "),t("tr",[t("td",[v._v("写后写")]),v._v(" "),t("td",[v._v("a = 1;"),t("br"),v._v("a = 2;")]),v._v(" "),t("td",[v._v("写一个变量后，再写这个变量")])]),v._v(" "),t("tr",[t("td",[v._v("读后写")]),v._v(" "),t("td",[v._v("a = b;"),t("br"),v._v("b = 1;")]),v._v(" "),t("td",[v._v("读一个变量后，再写这个变量")])])])]),v._v(" "),t("p",[v._v("上面三种情况，只要重排序任何两个操作的执行顺序，就会改变程序的执行结果。")]),v._v(" "),t("p",[v._v("编译器和处理器对操作进行重排序时，会遵守数据依赖性。编译器和处理器不会对存在数据依赖性的两个操作做重排序。因为重排序会改变程序的执行结果。")]),v._v(" "),t("p",[v._v("注意：数据依赖性指的是单个处理器中执行的指令序列和单个线程中执行的操作，"),t("strong",[v._v("不同处理器之间和不同线程之间的数据依赖性不被编译器和处理器考虑")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"_4-2-2-as-if-serial-语义和-happens-before-规则的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-as-if-serial-语义和-happens-before-规则的区别"}},[v._v("#")]),v._v(" 4.2.2 as-if-serial 语义和 happens-before 规则的区别")]),v._v(" "),t("ul",[t("li",[v._v("as-if-serial 语义保证单线程内程序的执行结果不被改变，happens-before 关系保证正确同步的多线程程序的执行结果不被改变。")]),v._v(" "),t("li",[v._v("as-if-serial 语义给编写单线程程序的程序员创造了一个幻觉：单线程程序是按程序的顺序来执行的。happens-before 关系给编写正确同步的多线程程序的程序员创造了一个幻觉：正确同步的多线程程序是按 happens-before 指定的顺序来执行的。")]),v._v(" "),t("li",[v._v("as-if-serial 语义和 happens-before 这么做的目的，都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度。")])]),v._v(" "),t("h3",{attrs:{id:"_4-3-多线程中的指令重排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-多线程中的指令重排序"}},[v._v("#")]),v._v(" 4.3 多线程中的指令重排序")]),v._v(" "),t("p",[v._v("从 Java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：")]),v._v(" "),t("p",[t("img",{attrs:{src:a(445),alt:""}})]),v._v(" "),t("p",[v._v("上图中，1 属于编译器重排序，2 和 3 属于处理器重排序。这些"),t("strong",[v._v("重排序可能会导致多线程程序出现内存可见性的问题")]),v._v("。")]),v._v(" "),t("ul",[t("li",[v._v("对于编译器重排序："),t("strong",[v._v("JMM 的编译器重排序规则")]),v._v("会"),t("strong",[v._v("直接禁止")]),v._v("特定类型的编译器重排序。")]),v._v(" "),t("li",[v._v("对于处理器重排序：JMM 的处理器重排序规则会要求 Java 编译器在生成指令时，通过"),t("strong",[v._v("插入特定类型的内存屏障（Memory Barriers）指令")]),v._v("，来禁止特定类型的处理器重排序。")])]),v._v(" "),t("p",[v._v("JMM 属于语言级内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。")]),v._v(" "),t("h4",{attrs:{id:"_4-3-1-内存屏障"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-内存屏障"}},[v._v("#")]),v._v(" 4.3.1 内存屏障")]),v._v(" "),t("p",[v._v("内存屏障（Memory Barriers）：是一组处理器指令，用于实现对内存操作的顺序限制。")]),v._v(" "),t("p",[v._v("内存屏障的目的是为了在多 CPU 的情况下保证各 CPU 中缓存的一致性。")]),v._v(" "),t("blockquote",[t("p",[v._v("只有一个 CPU 的时候并不需要内存屏障；但如果有两个或者更多 CPU 访问同一块内存，且其中有一个在观测另一个，就需要内存屏障来保证一致性了。")])]),v._v(" "),t("p",[v._v("内存屏障提供的四个功能：")]),v._v(" "),t("ol",[t("li",[v._v("它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障之后的位置。")]),v._v(" "),t("li",[v._v("确保在执行到内存屏障修饰的指令时前面的指令全部执行完成。")]),v._v(" "),t("li",[v._v("强制对缓存（线程本地内存）的修改操作立即写入主内存中。")]),v._v(" "),t("li",[v._v("如果是写操作，它会导致其他 CPU中的缓存（线程本地内存）无效。（这一点由缓存一致性协议保证）")])]),v._v(" "),t("h4",{attrs:{id:"_4-3-2-jmm-对于-volatile-型变量的特殊规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-jmm-对于-volatile-型变量的特殊规则"}},[v._v("#")]),v._v(" 4.3.2 JMM 对于 volatile 型变量的特殊规则")]),v._v(" "),t("p",[v._v("关键字 volatile 是 JVM 提供的最轻量级的同步机制。当一个变量定义为 volatile 之后，它具备两种特性：")]),v._v(" "),t("ul",[t("li",[v._v("可见性。volatile 变量对所有线程是立即可见的，对 volatile 变量所有的"),t("strong",[v._v("写操作")]),v._v("都能立即反应到其他线程之中，换句话说，volatile 变量的值在各个线程中是一致的。但是这并不代表 volatile 变量的"),t("strong",[v._v("运算")]),v._v("在并发中是安全的。所以在以下两条规则的运算中，我们仍然需要通过加锁来保证原子性，进而保证运算在多线程中是安全的：\n"),t("ul",[t("li",[v._v("运算结果依赖于变量当前的值。")]),v._v(" "),t("li",[v._v("变量需要与其他状态变量协同工作。")])])]),v._v(" "),t("li",[v._v("禁止指令重排序优化。通过在指令序列中"),t("strong",[v._v("插入内存屏障")]),v._v("来禁止重排序。")])]),v._v(" "),t("p",[t("strong",[v._v("volatile 和 final 关键字保证可见性的原理都是通过内存屏障实现的")]),v._v("。")]),v._v(" "),t("p",[v._v("参考：")]),v._v(" "),t("p",[v._v("https://geek-docs.com/java/java-concurrent/concurrent-programming-core-problems.html")]),v._v(" "),t("p",[v._v("https://cloud.tencent.com/developer/article/1575509")])],1)}),[],!1,null,null,null);_.default=r.exports}}]);