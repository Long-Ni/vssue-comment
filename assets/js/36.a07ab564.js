(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{552:function(t,v,_){"use strict";_.r(v);var s=_(8),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("目录：")]),t._v(" "),_("TOC",{attrs:{"include-level":[2,4]}}),t._v(" "),_("h2",{attrs:{id:"与真实世界类比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#与真实世界类比"}},[t._v("#")]),t._v(" 与真实世界类比")]),t._v(" "),_("p",[t._v("如果你订阅了一份杂志或者报纸，那就不需要再去报摊查询新出版的刊物了。出版社（发布者）会在刊物出版后（甚至提前）直接将最新一期寄送到你的邮箱中。")]),t._v(" "),_("p",[t._v("出版社负责维护订阅者列表，了解订阅者对哪些刊物感兴趣。当订阅者希望出版社停止寄送新一起的杂志时，可随时从列表中退出。")]),t._v(" "),_("h2",{attrs:{id:"观察者模式结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式结构"}},[t._v("#")]),t._v(" 观察者模式结构")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("发布者")]),t._v("：会向其他对象发送值得关注的事件。事件会在发布者自身状态改变或者执行特定行为后发生。发布者中包含一个允许新订阅者加入和当前订阅者离开列表的架构。")]),t._v(" "),_("li",[t._v("当新事件发生时，发送者会遍历订阅列表并调用每个订阅者对象的通知方法。该方法是在订阅者接口中声明的。")]),t._v(" "),_("li",[_("strong",[t._v("订阅者")]),t._v("：接口声明了通知接口。在绝大多是情况下，该接口仅包含一个 update 方法。该方法可以拥有多个参数，使发布者能在更新时传递事件的详细信息。")]),t._v(" "),_("li",[_("strong",[t._v("具体订阅者")]),t._v("：可以执行一些操作来回应发布者的通知。 所有具体订阅者类都实现了同样的接口， 因此发布者不需要与具体类相耦合。")]),t._v(" "),_("li",[t._v("订阅者通常需要一些上下文信息来正确地处理更新。 因此， 发布者通常会将一些上下文数据作为通知方法的参数进行传递。 发布者也可将自身作为参数进行传递， 使订阅者直接获取所需的数据。")]),t._v(" "),_("li",[_("strong",[t._v("客户端")]),t._v("：会分别创建发布者和订阅者对象， 然后为订阅者注册发布者更新。")])]),t._v(" "),_("h2",{attrs:{id:"识别方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#识别方法"}},[t._v("#")]),t._v(" 识别方法")]),t._v(" "),_("p",[t._v("该模式可以通过将对象存储在列表中的订阅方法，和对于面向该列表中对象的更新方法的调用来识别。")])],1)}),[],!1,null,null,null);v.default=a.exports}}]);