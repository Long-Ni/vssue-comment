(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{535:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("strong",[t._v("并发编程三大核心基础理论：原子性、可见行、有序性。")])]),t._v(" "),a("p",[t._v("包含以下内容：")]),t._v(" "),a("ul",[a("li",[t._v("定义—— What")]),t._v(" "),a("li",[t._v("各特性问题产生的原因—— Why")]),t._v(" "),a("li",[t._v("如何保证其特性—— How")])]),t._v(" "),a("p",[t._v("目录：")]),t._v(" "),a("TOC",{attrs:{"include-level":[2,4]}}),t._v(" "),a("h2",{attrs:{id:"_1-原子性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-原子性"}},[t._v("#")]),t._v(" 1. 原子性")]),t._v(" "),a("p",[t._v("一个或者多个操作，要么全部执行且在执行过程中未被打断，要么全部不执行，就叫做原子性。")]),t._v(" "),a("blockquote",[a("p",[t._v("原子操作：不可分割、中断的一个或者一系列操作。")])]),t._v(" "),a("h3",{attrs:{id:"_1-1-原子性问题产生的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-原子性问题产生的原因"}},[t._v("#")]),t._v(" 1.1 原子性问题产生的原因")]),t._v(" "),a("p",[t._v("在多线程场景下，由于时间片在"),a("strong",[t._v("线程之间的切换")]),t._v("，就会导致原子性问题的产生。")]),t._v(" "),a("blockquote",[a("p",[t._v("程序执行的时候，一定是以线程为单位执行的。因为"),a("strong",[t._v("线程是 CPU 进行任务调度的基本单位")]),t._v("。")]),t._v(" "),a("p",[t._v("CPU 会根据不同的任务调度算法，将时间片分派给各个线程，从而去调度线程的执行。")]),t._v(" "),a("p",[t._v("时间片是 CPU 分配给各个线程的时间。时间片非常短，一般是几十毫秒（ms）。")]),t._v(" "),a("p",[t._v("当某个线程获取了 CPU 的时间片之后，就获得了 CPU 的执行权，去执行该线程任务。")]),t._v(" "),a("p",[t._v("当时间片耗尽之后，就会失去 CPU 的使用权。进而本任务会暂停执行，而去执行其他的线程任务。")])]),t._v(" "),a("h3",{attrs:{id:"_1-2-案例分析-i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-案例分析-i"}},[t._v("#")]),t._v(" 1.2 案例分析：i++")]),t._v(" "),a("p",[t._v("当多个线程去执行 "),a("code",[t._v("i++")]),t._v(" 的时候会出现并发问题。"),a("code",[t._v("i++")]),t._v(" 具体分为三个步骤执行（它是典型的读改写操作）：")]),t._v(" "),a("ol",[a("li",[t._v("从主内存中读取 "),a("code",[t._v("i")]),t._v(" 的值，并且存储到线程的本地内存中（共享变量的副本）。")]),t._v(" "),a("li",[t._v("线程根据本地内存的共享变量副本执行 "),a("code",[t._v("+1")]),t._v(" 的操作。")]),t._v(" "),a("li",[t._v("把本地内存中更新完成的共享变量 "),a("code",[t._v("i")]),t._v(" 刷新到主内存中。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 启动十个线程，每个线程都执行 i++ 操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicityTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicityTest")]),t._v(" atomicTest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicityTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("atomicTest"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("atomicTest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("以上程序的输出结果不一定是 10，多运行几次，可以看到会出现小于 10 的情况。")]),t._v(" "),a("p",[t._v("原因就是 "),a("code",[t._v("i++")]),t._v(" 不是原子操作，而是一个符合操作。"),a("code",[t._v("volatile")]),t._v(" 关键字是无法保证原子性的。")]),t._v(" "),a("h3",{attrs:{id:"_1-3-如何保证原子性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-如何保证原子性"}},[t._v("#")]),t._v(" 1.3 如何保证原子性")]),t._v(" "),a("p",[t._v("JMM 只保证了基本数据类型的访问和读写是具备原子性的（long 和 double 类型除外）。")]),t._v(" "),a("p",[t._v("但是大多数情况下，需要更大范围的原子性保证。此时的实现方法有：")]),t._v(" "),a("ol",[a("li",[t._v("悲观锁：synchronized、lock")]),t._v(" "),a("li",[t._v("乐观锁：原子类 CAS")])]),t._v(" "),a("p",[a("em",[t._v("注意：volatile 关键字无法保证原子性")])]),t._v(" "),a("h2",{attrs:{id:"_2-可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-可见性"}},[t._v("#")]),t._v(" 2. 可见性")]),t._v(" "),a("p",[t._v("一个线程对于共享变量的修改，另外一个线程能够及时看到，就叫做可见性。")]),t._v(" "),a("h3",{attrs:{id:"_2-1-可见性问题产生的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-可见性问题产生的原因"}},[t._v("#")]),t._v(" 2.1 可见性问题产生的原因")]),t._v(" "),a("p",[t._v("在多线程场景下，"),a("strong",[t._v("缓存")]),t._v("不能及时刷新到主内存中，是导致可见性问题产生的根本原因。")]),t._v(" "),a("h3",{attrs:{id:"_2-2-案例分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-案例分析"}},[t._v("#")]),t._v(" 2.2 案例分析")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VisibilityTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("change")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a = "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('", b = "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VisibilityTest")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VisibilityTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("change")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("以上程序的输出情况不一定是 "),a("code",[t._v("a = 1, b = 2")]),t._v(" 或者 "),a("code",[t._v("a = 3, b = 3")]),t._v(" ，多运行几次，可以看到会出现 "),a("code",[t._v("a = 1, b = 3")]),t._v(" 的情况。")]),t._v(" "),a("p",[t._v("原因就是第一个线程将值 "),a("code",[t._v("a = 3")]),t._v(" 修改后，但是对第二个线程是不可见的，所以才出现这一结果。如果将 a 和 b 都改成 "),a("code",[t._v("volatile")]),t._v(" 类型的变量再执行，则再也不会出现 "),a("code",[t._v("a = 1, b = 3")]),t._v(" 的结果了。")]),t._v(" "),a("p",[t._v("（本例参考自以下文章，我运行了多次没有出现第三种情况，但是已经可以说明问题了）")]),t._v(" "),a("h3",{attrs:{id:"_2-3-如何保证可见性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-如何保证可见性"}},[t._v("#")]),t._v(" 2.3 如何保证可见性")]),t._v(" "),a("ol",[a("li",[t._v("synchronized、lock：锁释放之前必须把最新的值同步到主内存中，以此来保证可见性。")]),t._v(" "),a("li",[t._v("volatile：被 volatile 修饰的变量，一个线程修改后立即把值同步到主内存中，其他线程使用前立即从主内存中刷新。")]),t._v(" "),a("li",[t._v("final：被 final 修饰的字段在构造器中一旦初始化完成，并且构造器没有把 “this” 的引用传递出去（this 引用逃逸是一件很危险的事情，其他线程有可能通过这个引用访问到 “初始化了一半” 的对象），那在其他线程中就能看见 final 字段的值。")])]),t._v(" "),a("h2",{attrs:{id:"_3-有序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-有序性"}},[t._v("#")]),t._v(" 3. 有序性")]),t._v(" "),a("p",[t._v("程序执行的顺序按照代码书写的顺序去执行，就叫做有序性。")]),t._v(" "),a("h3",{attrs:{id:"_3-1-有序性问题产生的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-有序性问题产生的原因"}},[t._v("#")]),t._v(" 3.1 有序性问题产生的原因")]),t._v(" "),a("p",[t._v("编译器和处理器"),a("strong",[t._v("为了提高程序执行的性能")]),t._v("，会改变代码的执行顺序（写在前面的代码不一定是先被执行的），在多线程场景下就会导致有序性问题的产生（指令重排序不会影响单线程的执行）。")]),t._v(" "),a("h3",{attrs:{id:"_3-2-实例分析-单例模式之-double-check-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-实例分析-单例模式之-double-check-lock"}},[t._v("#")]),t._v(" 3.2 实例分析：单例模式之 Double Check Lock")]),t._v(" "),a("p",[t._v("利用双重检测锁定创建单例对象。双重检测锁定是只有当对象未创建的时候才加锁，对象创建以后不需要上锁。相对于懒汉式创建单例对象上来就加锁的方式，有效的提升了程序运行的效率。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先检查对象是否创建")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有当对象未创建的时候才加锁")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("DCL 解决了单例模式中性能和资源浪费的情况。但是 DCL 在并发（多线程）情况下，由于指令重排序，会得到没有初始化的实例，进而可能导致空指针异常。（解决办法是将 singleton 修饰为 volatile 变量）")]),t._v(" "),a("p",[t._v("具体分析：线程 A 调用 "),a("code",[t._v("getInstance()")]),t._v(" 方法获取对象实例，因为对象还是 null 未进行初始化，此时线程 A 会执行 "),a("code",[t._v("new Singleton()")]),t._v(" 进行对象实例化。而当线程 A 进行 "),a("code",[t._v("new Singleton()")]),t._v(" 的时候 JVM 会生成三个指令：")]),t._v(" "),a("ul",[a("li",[t._v("指令1：给对象分配一块内存")]),t._v(" "),a("li",[t._v("指令2：调用构造器，在内存中初始化对象")]),t._v(" "),a("li",[t._v("指令3：将内存地址赋值给实例")])]),t._v(" "),a("p",[t._v("经过编译器指令优化，实际执行顺序可能是：")]),t._v(" "),a("ul",[a("li",[t._v("指令1：给对象分配一块内存")]),t._v(" "),a("li",[t._v("指令3：将内存地址赋值给实例")]),t._v(" "),a("li",[t._v("指令2：调用构造器，在内存中初始化对象")])]),t._v(" "),a("p",[t._v("当执行完指令3还没有执行指令2时，此时 CPU 切换到了线程 B 工作，线程 B 也调用了 "),a("code",[t._v("getInstance()")]),t._v(" 方法获取对象实例，当线程 B 执行到 "),a("code",[t._v("if (singleton == null)")]),t._v(" 发现对象不为空，那么线程 B 就得到了一个未被初始化的实例。")]),t._v(" "),a("h3",{attrs:{id:"_3-3-如何保证有序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-如何保证有序性"}},[t._v("#")]),t._v(" 3.3 如何保证有序性")]),t._v(" "),a("ol",[a("li",[t._v("synchronized、lock：一个变量在同一时刻只允许一条线程对其进行 lock 操作。这条规则也决定了持有同一个锁的两个同步代码块只能串行的执行。")]),t._v(" "),a("li",[t._v("volatile：禁止指令重排序。")])]),t._v(" "),a("p",[t._v("此外，JMM 通过 Happes-before 原则，具备一些天生的有序性规则，不需要任何同步方法就能保证有序性。如果两个操作无法从 Happens-before 推导出来，那么这两个操作就无法保证有序性，也就是说编译器或者处理器可以随意对它们进行重排序处理。")]),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("p",[t._v("https://cloud.tencent.com/developer/article/1744660")]),t._v(" "),a("p",[t._v("https://www.liaoxuefeng.com/wiki/1252599548343744/1304521607217185")]),t._v(" "),a("p",[t._v("http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html")]),t._v(" "),a("p",[t._v("https://www.cnblogs.com/sxkgeek/p/9397534.html")]),t._v(" "),a("p",[t._v("https://geek-docs.com/java/java-concurrent/concurrent-programming-orderliness.html")])],1)}),[],!1,null,null,null);s.default=e.exports}}]);