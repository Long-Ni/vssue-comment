(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{460:function(_,v,t){_.exports=t.p+"assets/img/cap.3075ee47.png"},539:function(_,v,t){"use strict";t.r(v);var a=t(8),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("p",[_._v("目录：")]),_._v(" "),a("TOC",{attrs:{"include-level":[2,4]}}),_._v(" "),a("h2",{attrs:{id:"_1-关系型数据库遵循-acid-规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-关系型数据库遵循-acid-规则"}},[_._v("#")]),_._v(" 1. 关系型数据库遵循 ACID 规则")]),_._v(" "),a("p",[_._v("事务 (transaction) —— 与现实世界的交易类似，有如下四个特性：")]),_._v(" "),a("ol",[a("li",[a("p",[_._v("A(Atomicity)  原子性")]),_._v(" "),a("p",[_._v("事物中所有的操作要么都做完，要么都不做。事物成功的条件是事务中所有操作都成功，只要有一个操作失败，整个事物就失败，需要回滚。")])]),_._v(" "),a("li",[a("p",[_._v("C(Consistency) 一致性")]),_._v(" "),a("p",[_._v("数据库要一直处于一致的状态，事物的运行不会改变数据库原本的一致性约束。")]),_._v(" "),a("p",[_._v("例如，现有完整性约束 a+b=10， 如果一个事物改变了 a ， 那么必须改变 b ，使得事物依然满足 a+b=10， 否则事物失败。")])]),_._v(" "),a("li",[a("p",[_._v("I(Isolation) 独立性")]),_._v(" "),a("p",[_._v("并发的事物之间不会互相影响。如果一个事物访问的数据正在被另一个事物修改， 只要另外一个事务未提交，它所访问的数据就不受未提交事物的影响。")])]),_._v(" "),a("li",[a("p",[_._v("D(Durability) 持久性")]),_._v(" "),a("p",[_._v("一旦事物提交后，它所做的修改将永久的被保存在数据库上，即使宕机也不会丢失。")])])]),_._v(" "),a("h2",{attrs:{id:"_2-分布式系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分布式系统"}},[_._v("#")]),_._v(" 2. 分布式系统")]),_._v(" "),a("p",[_._v("分布式系统 (distributed system) 由多台计算机和通信的软件组件通过计算机网络连接组成。\n分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。")]),_._v(" "),a("h3",{attrs:{id:"_2-1-分布式计算的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-分布式计算的优点"}},[_._v("#")]),_._v(" 2.1. 分布式计算的优点")]),_._v(" "),a("p",[a("strong",[_._v("可靠性")]),_._v("\n一台服务器的系统奔溃并不会影响其余的服务器。")]),_._v(" "),a("p",[a("strong",[_._v("可扩展性")]),_._v("\n根据需要增加更多的机器。")]),_._v(" "),a("p",[a("strong",[_._v("资源共享")]),_._v("\n共享数据。")]),_._v(" "),a("p",[a("strong",[_._v("灵活性")]),_._v("\n容易安装，实施和调试新的服务。")]),_._v(" "),a("p",[a("strong",[_._v("更快的速度")]),_._v("\n多台计算机的计算能力。")]),_._v(" "),a("p",[a("strong",[_._v("开放系统")]),_._v("\n本地或远程都可以访问到服务。")]),_._v(" "),a("p",[a("strong",[_._v("更高的性能")]),_._v("\n较集中式计算机网络集群有更高的性能。")]),_._v(" "),a("h3",{attrs:{id:"_2-2-分布式计算的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-分布式计算的缺点"}},[_._v("#")]),_._v(" 2.2. 分布式计算的缺点")]),_._v(" "),a("p",[a("strong",[_._v("故障排除")]),_._v("\n故障排除和诊断问题。")]),_._v(" "),a("p",[a("strong",[_._v("软件")]),_._v("\n支持的软件较少。")]),_._v(" "),a("p",[a("strong",[_._v("网络")]),_._v("\n传输问题，高负载，信息丢失等。")]),_._v(" "),a("p",[a("strong",[_._v("安全性")]),_._v("\n数据的安全和共享的风险等问题。")]),_._v(" "),a("h2",{attrs:{id:"_3-nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-nosql"}},[_._v("#")]),_._v(" 3. NoSQL")]),_._v(" "),a("h3",{attrs:{id:"_3-1-什么是-nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-什么是-nosql"}},[_._v("#")]),_._v(" 3.1. 什么是 NoSQL")]),_._v(" "),a("p",[_._v("NoSQL， 指非关系型数据库。有时也被称作 Not Only SQL 的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。")]),_._v(" "),a("p",[_._v("NoSQL 用于超大规模的数据存储。存储数据时不需要固定的模式，无需多余的操作就可以横向扩展。")]),_._v(" "),a("h3",{attrs:{id:"_3-2-为什么使用-nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-为什么使用-nosql"}},[_._v("#")]),_._v(" 3.2. 为什么使用 NoSQL")]),_._v(" "),a("p",[_._v("个人信息，社交网络，地理位置，用户生成的数据和用户操作日志成倍增加， SQL数据库已经不适合此类应用，NoSQL 数据库可以很好的处理这些大的数据。")]),_._v(" "),a("h2",{attrs:{id:"_4-rdbms-vs-nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-rdbms-vs-nosql"}},[_._v("#")]),_._v(" 4. RDBMS vs NoSQL")]),_._v(" "),a("table",[a("thead",[a("tr",[a("th",[_._v("RDBMS")]),_._v(" "),a("th",[_._v("NoSQL")])])]),_._v(" "),a("tbody",[a("tr",[a("td",[_._v("- 高度组织化，结构化的数据")]),_._v(" "),a("td",[_._v("- 代表不仅仅是 SQL")])]),_._v(" "),a("tr",[a("td",[_._v("- 结构化查询语言 （SQL）")]),_._v(" "),a("td",[_._v("- 没有声明性查询语言")])]),_._v(" "),a("tr",[a("td",[_._v("- 数据和关系都存储在单独额表中")]),_._v(" "),a("td",[_._v("- 没有预定于的模式")])]),_._v(" "),a("tr",[a("td",[_._v("- 数据操纵语言，数据定义语言")]),_._v(" "),a("td",[_._v("- 键值对存储，列存储，文档存储，图形数据库")])]),_._v(" "),a("tr",[a("td",[_._v("- 严格的一致性")]),_._v(" "),a("td",[_._v("- 最终一致性，而非 ACID 属性")])]),_._v(" "),a("tr",[a("td",[_._v("- 基础事务")]),_._v(" "),a("td",[_._v("- CAP 定理")])]),_._v(" "),a("tr",[a("td"),_._v(" "),a("td",[_._v("- 高性能，高可用和可伸缩性")])])])]),_._v(" "),a("h2",{attrs:{id:"_5-cap-定理-cap-theorem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-cap-定理-cap-theorem"}},[_._v("#")]),_._v(" 5. CAP 定理 (CAP theorem)")]),_._v(" "),a("p",[_._v("又称布鲁尔定理 (Brewer's theorem)，它指对于一个分布式计算机系统来说，不可能同时满足以下三点。")]),_._v(" "),a("ul",[a("li",[_._v("一致性 (Consistency)：所有的节点在同一时间具有相同的数据。")]),_._v(" "),a("li",[_._v("可用性 (Availability)：保证每个请求不管成功还是失败都有响应。")]),_._v(" "),a("li",[_._v("分区容错性 (Partition tolerance)：系统中任意信息的丢失或者失败不会影响系统的继续运行。")])]),_._v(" "),a("p",[_._v("CAP 理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性，分区容错性这三个需求，最多只能同时较好的满足两个。")]),_._v(" "),a("p",[_._v("因此，根据 CAP 原理将 NoSQL 数据库分成了满足满足 CA 原则， 满足 CP 原则， 满足 AP 原则三大类：")]),_._v(" "),a("p",[a("img",{attrs:{src:t(460),alt:""}})]),_._v(" "),a("ul",[a("li",[_._v("CA ：RDBMS")]),_._v(" "),a("li",[_._v("CP ：MongoDB，HBase，Redis")]),_._v(" "),a("li",[_._v("AP ：CouchDB，DynamoDB，Cassandra，Riak")])]),_._v(" "),a("h2",{attrs:{id:"_6-base"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-base"}},[_._v("#")]),_._v(" 6. BASE")]),_._v(" "),a("p",[_._v("BASE 是 NoSQL 数据库通常对可用性及一致性弱要求原则：")]),_._v(" "),a("ul",[a("li",[_._v("Basically Availability： 基本可用。")]),_._v(" "),a("li",[_._v("Soft-state：软状态/柔性事务。")]),_._v(" "),a("li",[_._v("Eventual Consistency：最终一致性，也是 ACID 的最终目的。")])]),_._v(" "),a("h2",{attrs:{id:"_7-nosql-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-nosql-分类"}},[_._v("#")]),_._v(" 7. NoSQL 分类")]),_._v(" "),a("table",[a("thead",[a("tr",[a("th",[_._v("类型")]),_._v(" "),a("th",[_._v("部分代表")]),_._v(" "),a("th",[_._v("特点")])])]),_._v(" "),a("tbody",[a("tr",[a("td",[_._v("列存储")]),_._v(" "),a("td",[_._v("Hbase"),a("br"),_._v("Cassandra"),a("br"),_._v("Hypertable")]),_._v(" "),a("td",[_._v("按列存储数据。方便存储结构化或者半结构化的数据，"),a("br"),_._v("方便做数据压缩，对针对某一列或者某几列的查询有非常大的 IO 优势。")])]),_._v(" "),a("tr",[a("td",[a("strong",[_._v("文档存储")])]),_._v(" "),a("td",[_._v("MongoDB"),a("br"),_._v("CouchDB")]),_._v(" "),a("td",[_._v("一般用于类似 JSON 的数据格式存储，存储的内容是文档型的。"),a("br"),_._v("这样有机会对某些字段建立索引，实现关系数据库的某些功能。")])]),_._v(" "),a("tr",[a("td",[_._v("key-value 存储")]),_._v(" "),a("td",[_._v("Redis"),a("br"),_._v("MemcacheDB")]),_._v(" "),a("td",[_._v("通过 key 快速查询到其 value 。")])]),_._v(" "),a("tr",[a("td",[_._v("图存储")]),_._v(" "),a("td",[_._v("Neo4J"),a("br"),_._v("FlockDB")]),_._v(" "),a("td",[_._v("图形关系的最佳存储。")])]),_._v(" "),a("tr",[a("td",[_._v("对象存储")]),_._v(" "),a("td",[_._v("db4o"),a("br"),_._v("Versant")]),_._v(" "),a("td",[_._v("通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。")])]),_._v(" "),a("tr",[a("td",[_._v("xml 数据库")]),_._v(" "),a("td",[_._v("Berkeley DB XML"),a("br"),_._v("BaseX")]),_._v(" "),a("td",[_._v("高效存储 XML 数据，并支持 XML 的内部查询语法， 比如 Xpath 。")])])])])],1)}),[],!1,null,null,null);v.default=s.exports}}]);