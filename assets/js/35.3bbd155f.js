(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{551:function(t,s,n){"use strict";n.r(s);var a=n(8),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("Redis 的数据类型与抽象")]),t._v(" "),n("p",[t._v("Redis 不是简单得键值存储。它实际是一种数据结构服务器，支持不同类型的值。")]),t._v(" "),n("p",[t._v("在传统的键值存储中，是将字符串键和字符串值相关联。Redis 中该值不在局限于简单的字符串，还可以容纳更复杂的数据结构。")]),t._v(" "),n("p",[t._v("目录：")]),t._v(" "),n("TOC",{attrs:{"include-level":[2,4]}}),t._v(" "),n("h2",{attrs:{id:"_1-redis-常见数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis-常见数据类型"}},[t._v("#")]),t._v(" 1. Redis 常见数据类型")]),t._v(" "),n("h3",{attrs:{id:"_1-1-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-string"}},[t._v("#")]),t._v(" 1.1. String")]),t._v(" "),n("p",[t._v("String 是 Redis 值的最基本类型。")]),t._v(" "),n("p",[t._v("Redis String 是二进制安全的。这意味着 Redis 字符串可以包含任何类型的数据，例如 JPEG 图像或者序列化的 Ruby 对象。")]),t._v(" "),n("p",[t._v("String 的最大长度是 512 MB 。")]),t._v(" "),n("p",[n("strong",[t._v("Redis String 使用：")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("使用 INCR 系列中的命令（INCR，DECR，INCRBY）将 String 用作原子计数器。")]),t._v(" "),n("p",[n("code",[t._v("INCR")]),t._v("：将存储在 key 上的数字增加 1。如果 key 不存在，则在执行操作前将其设为 0。如果 key 包含一个错误类型的值，或者包含一个不能用整数表示的字符串，将返回一个错误。此操作仅限于64位有符号的整数。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" key001 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> INCR key001\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 11\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key001\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"11"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" key002 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test-string"')]),t._v("\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> INCR key002\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ERR value is not an integer or out of range\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])]),n("p",[n("code",[t._v("DECR")]),t._v("：将存储在 key 上的数字减 1。如果 key 不存在，则在执行操作前将其设为 0。如果 key 包含一个错误类型的值，或者包含一个不能用整数表示的字符串，将返回一个错误。此操作仅限于64位有符号的整数。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" key003 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> DECR key003\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 9\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key003\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" key004 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"234293482390480948029348230948"')]),t._v("\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> DECR key004\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ERR value is not an integer or out of range\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key004\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"234293482390480948029348230948"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])]),n("p",[n("code",[t._v("INCRBY")]),t._v("：将存储在 key 上的数字按增量递增。如果 key 不存在，则在执行操作前将其设为 0。如果 key 包含一个错误类型的值，或者包含一个不能用整数表示的字符串，将返回一个错误。此操作仅限于64位有符号的整数。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" key005 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> INCRBY key005 5\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 15\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key005\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"15"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("使用 APPEND 命令附加 String 。")]),t._v(" "),n("p",[n("code",[t._v("APPEND")]),t._v("：如果 key 已经存在，并且是一个字符串，那么这条命令就会在字符串的末尾添加值。如果 key 不存在，则创建并设置为空字符串，所以 APPEND 将类似于这种特殊情况下的 SET。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> EXISTS key006\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> APPEND key006 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 5\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> APPEND key006 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" World"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 11\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key006\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("使用 GETRANGE 和 SETRANGE 将 String 用作随机访问向量。")]),t._v(" "),n("p",[n("code",[t._v("GETRANGE")]),t._v("：返回存储在 key 处的字符串值的子串，由偏移量 start 和 end 决定（两者都是包含的）。负偏移量可以用来提供一个从字符串末尾开始的偏移量。所以 -1 表示最后一个字符，-2 表示倒数第二个字符，以此类推。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" key007 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a string"')]),t._v("\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> GETRANGE key007 0 3\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> GETRANGE key007 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("1\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ing"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> GETRANGE key007 0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("1\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a string"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> GETRANGE key007 10 100\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> GETRANGE key007 100 200\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])]),n("p",[n("code",[t._v("SETRANGE")]),t._v("：从指定的偏移量开始，覆盖存储在 key 的部分字符串，覆盖整个 value 的长度。如果偏移量大于 key 处字符串的当前长度，则用零字节填充字符串，以使偏移量适合。不存在的 key 被认为是空字符串，所以这条命令将确保它持有一个足够大的字符串，以便能够在偏移量处设置值。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" key008 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),t._v("\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SETRANGE key008 6 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Redis"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 11\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key008\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello Redis"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SETRANGE key009 6 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Redis"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 11\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key009\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x00\\x00\\x00\\x00\\x00\\x00Redis"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("在很小的空间内编码大量数据，或者使用 GETBIT 和 SETBIT 创建 Redis 支持的 Bloom Filter 。")]),t._v(" "),n("p",[n("code",[t._v("GETBIT")]),t._v("：返回存储在 key 的字符串值中偏移量的位值。当偏移量超出字符串长度时，假设字符串是一个 0 位的连续空间。当 key 不存在时，假设为空字符串，所以偏移量总是超出范围，值也假设为 0 位的连续空间。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SETBIT key010 7 1\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> GETBIT key010 0\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> GETBIT key010 7\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> GETBIT key010 100\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])]),n("p",[n("code",[t._v("SETBIT")]),t._v("：设置或清除存储在 key 的字符串值中偏移的位。位的设置或清除取决于值，它可以是 0 或 1。当 key 不存在时，会创建一个新的字符串值。字符串会被增长，以确保它能在偏移量处容纳一个位。偏移量参数必须大于或等于0，并且小于232（这限制了位图到512MB）。当键处的字符串被增长时，增加的位被设置为0。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SETBIT key011 7 1\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key011\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x01"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SETBIT key011 7 0\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> get key011\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\x00"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"_1-2-lists"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-lists"}},[t._v("#")]),t._v(" 1.2. Lists")]),t._v(" "),n("p",[t._v("Redis Lists 只是简单的字符串列表，按插入顺序排序。")]),t._v(" "),n("p",[t._v("可以将元素添加到 Redis Lists 的头部（左侧）或者尾部（右侧）。")]),t._v(" "),n("p",[t._v("LPUSH 命令在头部插入新元素。 RPUSH 命令在尾部插入新元素。针对空的键执行此操作时，将会创建新的 Lists 。同样，如果列表操作将列表清空了，则该键从键空间中删除。")]),t._v(" "),n("p",[t._v("List 的最大长度是 2"),n("sup",[t._v("32")]),t._v(" - 1 个元素（4294967295，每个 List 的元素可以超过 40 亿个）。")]),t._v(" "),n("p",[t._v("从时间复杂度的角度来看， Redis Lists 的主要功能是支持恒定时间插入和删除头部和尾部附近的元素，即使有数百万个插入项也是如此。 在列表的极端附近，访问元素的速度非常快，但是如果您尝试访问一个很大的列表的中间位置，则访问元素的速度会很慢，因为这是 O(N) 操作。")]),t._v(" "),n("p",[n("strong",[t._v("Redis Lists 使用：")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("在社交网络中对时间轴建模，使用 LPUSH 在用户时间轴中添加新元素，并使用 LRANGE 来检索一些最近插入的项目。")]),t._v(" "),n("p",[n("code",[t._v("LPUSH")]),t._v("：将所有指定的值插入存储在 key 的列表头部。如果 key 不存在，则在执行 push 操作之前，将其创建为空列表。当 key 持有的值不是列表时，将返回一个错误。只需在命令末尾指定多个参数，就可以使用一个命令调用推送多个元素。从最左边的元素到最右边的元素，元素一个接一个地插入到列表的头部。因此，例如 "),n("code",[t._v("LPUSH mylist a b c")]),t._v(" 命令将产生一个包含 c 作为第一个元素、b 作为第二个元素和 a 作为第三个元素的列表。")]),t._v(" "),n("p",[n("code",[t._v("LRANGE")]),t._v("：返回存储在 key 处的列表中的指定元素。偏移量 start 和 stop 是基于 0 的索引，0 是列表的第一个元素（列表的头部），1 是下一个元素，以此类推。这些偏移量也可以是负数，表示从列表的最后开始的偏移量。例如，-1 是列表的最后一个元素，-2 是倒数第二个元素，以此类推。")]),t._v(" "),n("p",[n("code",[t._v("RPUSH")]),t._v("：在 key 存储的列表尾部插入所有指定的值。如果 key 不存在，则在执行push操作之前，将其创建为空列表。当 key 持有的值不是列表时，将返回一个错误。只需在命令末尾指定多个参数，就可以使用一个命令调用推送多个元素。从最左边的元素到最右边的元素，元素是一个接一个地插入到列表的尾部。因此，例如 "),n("code",[t._v("RPUSH mylist a b c")]),t._v(" 命令将产生一个包含 a 作为第一个元素、b 作为第二个元素和 c 作为第三个元素的列表。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LPUSH key013 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LPUSH key013 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 2\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LRANGE key013 0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("1\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> RPUSH key014 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> RPUSH key014 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 2\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> RPUSH key014 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 3\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LRANGE key014 0 0\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LRANGE key014 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("3 2\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LRANGE key014 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("100 100\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LRANGE key014 5 10\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty list or "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("可以将 LPUSH 与 LTRIM 一起使用，去创建一个列表，该列表不超过给定数量的元素，而只记住最新的 N 个元素。")]),t._v(" "),n("p",[n("code",[t._v("LTRIM")]),t._v("：修剪一个现有的列表，使其只包含指定的元素范围。start 和 stop 都是基于 0 的索引，其中 0 是列表的第一个元素（头部），1 是下一个元素，以此类推。例如："),n("code",[t._v("LTRIM foobar 0 2")]),t._v(" 将修改存储在 foobar 的列表，只保留列表的前三个元素。start 和 end 也可以是负数，表示与列表末尾的偏移量，其中 -1 是列表的最后一个元素，-2 是倒数第二个元素，以此类推。超出范围的索引不会产生错误：如果 start 大于列表的结束，或者 start > end，结果将是一个空列表（会导致 key 被删除）。如果 end 大于列表末尾，Redis 会把它当作列表的最后一个元素。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> RPUSH key016 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> RPUSH key016 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 2\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> RPUSH key016 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 3\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LTRIM key016 1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("1\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> LRANGE key016 0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("1\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("列表可以用作消息传递原函数。例如，用于创建后台作业的 Resque Ruby 库。")])]),t._v(" "),n("li",[n("p",[t._v("可以使用列表做更多的事情，此数据类型支持许多命令，包括诸如 BLPOP 之类的阻止命令。")]),t._v(" "),n("p",[n("code",[t._v("BLPOP")]),t._v(" 是一个阻塞列表弹出的基元。它是 "),n("code",[t._v("LPOP")]),t._v(" 的阻塞版本，因为当没有元素从任何给定列表中弹出时，它就会阻塞连接。一个元素从第一个非空的列表头弹出，按照给定键的顺序进行检查。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("DEL")]),t._v(" key017 key018\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> RPUSH key017 a b c\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 3\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> BLPOP key017 key018 0\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key017"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v("\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"_1-3-sets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-sets"}},[t._v("#")]),t._v(" 1.3. Sets")]),t._v(" "),n("p",[t._v("Redis Sets 是字符串的无序集合。 可以在 O(1) 中添加，删除元素或者测试成员是否存在（恒定时间，无论Set中包含的成员数量如何）。")]),t._v(" "),n("p",[t._v("Redis Sets 具有不允许重复成员的理想属性。 多次添加同一成员将导致集合具有该成员的单个副本。"),n("strong",[t._v("实际上，这意味着添加成员时不需要检查是否存在，直接进行添加操作")]),t._v("。")]),t._v(" "),n("p",[t._v("关于 Redis Sets 的一个非常有趣的事情是，它们支持服务器端许多命令来从现有集合开始计算集合，因此可以在很短的时间内完成集的并集，交集，差集。")]),t._v(" "),n("p",[t._v("Set 的最大长度是 2"),n("sup",[t._v("32")]),t._v(" - 1 个成员（4294967295，每个 Set 的成员可以超过 40 亿个）。")]),t._v(" "),n("p",[n("strong",[t._v("Redis Sets 使用：")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("可以使用 Redis Sets 来跟踪唯一的事物。 例如，如果知道访问给定博客帖子的所有唯一 IP 地址，只需要每次处理页面视图时使用 SADD 。 确保不会插入重复的 IP 。")]),t._v(" "),n("p",[n("code",[t._v("SADD")]),t._v("： 将指定的成员添加到存储在 key 的集合中。已经是这个集合的成员的指定成员将被忽略。如果 key 不存在，那么在添加指定成员之前会创建一个新的集合。当存储在 key 处的值不是一个集合时，将返回一个错误。\n"),n("code",[t._v("SMEMBERS")]),t._v("：返回存储在 key 的集合值的所有成员。这与使用一个参数 key 运行 "),n("code",[t._v("SINTER")]),t._v(" 的效果相同。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key019 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key019 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key019 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SMEMBERS key019\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("Redis Sets 可以很好地表示关系。例如， 使用 Redis 创建标签系统，一个 Set 代表每个标签。 使用 SADD 命令可以将具有给定标签的所有对象的所有 ID 添加到代表该特定标签的 Set 中。 使用 SINTER 命令可以将同时具有三个不同的标签的所有对象的所有 ID 添加到代表该特定标签的 Set 中。")]),t._v(" "),n("p",[n("code",[t._v("SINTER")]),t._v("：返回所有给定集合的交集所产生的集合成员。不存在的键被认为是空集。当其中一个键是空集时，产生的集也是空的(因为集与空集相交的结果总是空集)。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key020 a\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key020 b\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key020 c\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key021 c\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key021 d\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key021 e\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SINTER key020 key021\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("使用 SPOP 或 SRANDMEMBER 命令随机提取 Sets 中的成员。")]),t._v(" "),n("p",[n("code",[t._v("SPOP")]),t._v("：从存储在 key 的集合中删除并返回一个或多个随机元素。 这个操作类似于 "),n("code",[t._v("SRANDMEMBER")]),t._v("，从一个集合中返回一个或多个随机元素，但不删除它。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key022 one\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key022 two\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key022 three\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SPOP key022\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SMEMBERS key022\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key022 four\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key022 five\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SMEMBERS key022\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"five"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"four"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SPOP key022 3\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"five"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SMEMBERS key022\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"four"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])]),n("p",[n("code",[t._v("SRANDMEMBER")]),t._v("：当只用 key 参数调用时，从存储在 key 处的集合值中返回一个随机元素。从 Redis 2.6 版本开始，当使用额外的 count 参数调用时，如果 count 为正值，则返回一个由不同元素组成的数组。如果用负数调用，行为就会改变，命令可以多次返回同一个元素。在这种情况下，返回的元素个数是指定 count 的绝对值。当只用 key 参数调用时，操作类似于  "),n("code",[t._v("SPOP")]),t._v("，但是 "),n("code",[t._v("SPOP")]),t._v(" 也会从集合中删除随机选择的元素，而 "),n("code",[t._v("SRANDMEMBER")]),t._v(" 只会返回一个随机元素，而不会以任何方式改变原始集合。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SADD key023 one two three\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 3\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SRANDMEMBER key023\n"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SRANDMEMBER key023 2\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SRANDMEMBER key023 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("5\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> SMEMBERS key023\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"_1-4-sorted-sets"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-sorted-sets"}},[t._v("#")]),t._v(" 1.4. Sorted sets")]),t._v(" "),n("p",[t._v("与 Redis Sets 类似，Redis Sorted Sets 是非重复的字符串集合。 区别在于，Sorted Sets 的每个成员都与 "),n("em",[t._v("Score")]),t._v(" （得分）相关联，该 score 用于从最小得分到最大得分中获取 Sorted Set 的排序。 虽然成员是唯一的，但分数可能会重复。")]),t._v(" "),n("p",[t._v("使用 Sorted Sets ，您可以以非常快的方式（在与元素数量的对数成比例的时间内）去添加，删除或更新元素。 由于元素是按顺序排列的，而不是随后进行排序的。因此也可以非常快速地按分数或按排名（位置）获得范围。")]),t._v(" "),n("p",[t._v("访问 Sorted Set 的中间位置也非常快，因此可以将 Sorted Sets 用作非重复元素的智能 Lists 。从中可以快速访问所需的所有内容：元素排序，快速测试元素是否存在，对中间元素的快速访问 ！")]),t._v(" "),n("p",[t._v("简而言之，使用 Sorted Sets，可以执行许多性能出色的任务，而这些任务实际上很难在其他类型的数据库中建模。")]),t._v(" "),n("p",[t._v("Sorted Sets可能是最高级的 Redis 数据类型，因此花一些时间检查 Sorted Set 命令的完整列表，去发现可以使用Redis做什么！")]),t._v(" "),n("p",[n("strong",[t._v("Sorted Sets 使用：")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("在大型在线游戏中排行榜，每次提交新分数时，您都可以使用 ZADD 对其进行更新。 您可以轻松地使用 ZRANGE 吸引顶级用户，比如使用 ZRANK 返回给定用户名在列表中的排名。 一起使用 ZRANK 和 ZRANGE 可以向用户显示得分与给定用户相似的得分。 一切都很快。")]),t._v(" "),n("p",[n("code",[t._v("ZADD")]),t._v("：将所有指定成员的指定分数添加到存储在 key 处的排序集合中。可以指定多个分数、成员对。如果一个指定的成员已经是排序集的成员，那么分数会被更新，并在正确的位置重新插入元素，以确保正确的排序。如果 key 不存在，就会创建一个新的排序集，指定的成员是唯一的成员，就像排序集是空的一样。如果 key 存在，但不持有一个排序集，则返回一个错误。分数值应该是一个双精度浮点数的字符串表示。+inf 和 -inf 值也是有效值。")]),t._v(" "),n("p",[n("code",[t._v("ZRANGE")]),t._v("：返回存储在 key 处的排序集合中指定的元素范围。元素被认为是由最低分到最高分排序。对于分数相同的元素，使用词法排序。当你需要元素从最高分到最低分排序时，请参见 "),n("code",[t._v("ZREVRANGE")]),t._v(" (对于分数相同的元素，则使用降序词法排序)。开始和停止都是基于零的索引，0 是第一个元素，1 是下一个元素，以此类推。它们也可以是负数，表示从排序集的末端开始的偏移，-1 是排序集的最后一个元素，-2 是倒数第二个元素，以此类推。start 和 stop 是允许的，所以例如 "),n("code",[t._v("ZRANGE myzset 0 1")]),t._v(" 将返回排序集的第一个和第二个元素。超出范围的索引不会产生错误。如果 start 大于排序集中最大的索引，或者 start > stop，将返回一个空列表。如果 stop 大于排序集的末尾，Redis 将把它当作排序集的最后一个元素。可以传递 "),n("code",[t._v("WITHSCORES")]),t._v(" 选项，以便将元素的分数和元素一起返回。返回的列表将包含 value1,core1,...,valueN,coreN 而不是 value1,...,valueN。客户端库可以自由地返回一个更合适的数据类型（建议：一个带有(value, score)数组、元组的数组）。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key026 1 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key026 1 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uno"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key026 2 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v(" 3 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 2\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZRANGE key026 0 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("1 WITHSCORES\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uno"')]),t._v("\n4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n6"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v("\n7"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n8"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])]),n("p",[n("code",[t._v("ZRANK")]),t._v("：返回存储在 key 处的排序集合中成员的等级，分数从低到高排列。排名(或指数)是基于 0 的，这意味着得分最低的成员的排名为 0。使用 "),n("code",[t._v("ZREVRANK")]),t._v(" 获得元素的等级，分数从高到低排序。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key027 1 one\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key027 2 two\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key027 3 three\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZRANK key027 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 2\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZRANK key027 "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"four"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])]),t._v(" "),n("li",[n("p",[t._v("Sorted Sets 通常用于索引存储在 Redis 中的数据。 例如，如果您有许多代表用户的哈希，则可以使用一个 Sorted Set ，其中元素以用户的年龄作为得分，而用户的 ID 作为值。 因此，使用 ZRANGEBYSCORE 检索给定年龄段的所有用户将非常简单快捷。")]),t._v(" "),n("p",[n("code",[t._v("ZRANGEBYSCORE")]),t._v("：返回排序集合中键值在最小值和最大值之间的所有元素（包括得分等于最小值或最大值的元素）。这些元素被认为是由低分到高分排序的。具有相同分数的元素按词法顺序返回。（这是 Redis 中排序集实现的一个属性，不涉及进一步的计算）可选的LIMIT 参数可以用来只获取匹配元素的范围（类似于 SQL 中的 "),n("code",[t._v("SELECT LIMIT offset, count")]),t._v("）。负数则返回偏移量中的所有元素。请注意，如果偏移量很大，在得到要返回的元素之前，需要遍历排序集合中的偏移元素，这可能会增加O(N)的时间复杂性。可选的 WITHSCORES 参数使得命令同时返回元素和它的得分，而不是单独返回元素。这个选项从Redis 2.0 开始就有了。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key028 1 one\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key028 2 two\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZADD key028 3 three\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZRANGEBYSCORE key028 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("inf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("inf\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"three"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZRANGEBYSCORE key028 1 2\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZRANGEBYSCORE key028 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1 2\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"two"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> ZRANGEBYSCORE key028 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("1 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("2\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty list or "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"_1-5-hashes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-hashes"}},[t._v("#")]),t._v(" 1.5. Hashes")]),t._v(" "),n("p",[t._v("Redis Hashes 是字符串字段和字符串值之间的映射，因此它们是表示对象的理想数据类型（例如，一个用户有许多字段必比如： 姓名，年龄等）。")]),t._v(" "),n("p",[t._v("具有几个字段（其中几个意味着最多一百个左右）的 Hash 以占用很少空间的方式存储，因此可以在小型 Redis 实例中存储数百万个对象。")]),t._v(" "),n("p",[t._v("尽管 Hashes 主要用于表示对象，但是它们有能力存储许多元素，因此也可以将 Hashes 用于许多其他任务。")]),t._v(" "),n("p",[t._v("每个 Hash 可以存储 2"),n("sup",[t._v("32")]),t._v(" - 1 个键值对（超过 40 亿）。")]),t._v(" "),n("p",[n("code",[t._v("HMSET")]),t._v("：将指定字段设置为存储在钥匙处的散列中的相应值。该命令会覆盖散列中已有的任何指定字段。如果 key 不存在，则会创建一个新的 key 来存放哈希值。根据 Redis 4.0.0，"),n("code",[t._v("HMSET")]),t._v(" 被认为是过时的。请在新代码中使用 "),n("code",[t._v("HSET")]),t._v("。\n"),n("code",[t._v("HSET")]),t._v("：将存储在 key 的哈希字段设置为值。如果 key 不存在，则会创建一个新的 key 来存放哈希。如果字段已经存在于哈希中，则会被覆盖。从 Redis 4.0.0 开始，"),n("code",[t._v("HSET")]),t._v(" 是可变的，允许多个字段/值对。\n"),n("code",[t._v("HGETALL")]),t._v("：返回存储在 key 处的 hash 的所有字段和值。在返回的值中，每个字段名后面都跟着它的值，所以回复的长度是哈希大小的两倍。")]),t._v(" "),n("div",{staticClass:"language-powershell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[t._v("127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> HMSET key024 username tom password 1234 age 18\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> HGETALL key024\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),t._v("\n4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234"')]),t._v("\n5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),t._v("\n6"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"18"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> HMSET key024 gender boy\nOK\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> HGETALL key024\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),t._v("\n4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234"')]),t._v("\n5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),t._v("\n6"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"18"')]),t._v("\n7"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gender"')]),t._v("\n8"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boy"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> HSET key024 gender girl\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 0\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> HGETALL key024\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),t._v("\n4"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234"')]),t._v("\n5"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),t._v("\n6"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"18"')]),t._v("\n7"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gender"')]),t._v("\n8"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"girl"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> HSET key025 gender girl\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 1\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379> HGETALL key025\n1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gender"')]),t._v("\n2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"girl"')]),t._v("\n127"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1:6379>\n")])])]),n("h2",{attrs:{id:"_2-其他数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-其他数据类型"}},[t._v("#")]),t._v(" 2. 其他数据类型")]),t._v(" "),n("h3",{attrs:{id:"_2-1-bitmaps-and-hyperloglogs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-bitmaps-and-hyperloglogs"}},[t._v("#")]),t._v(" 2.1. Bitmaps and HyperLogLogs")]),t._v(" "),n("blockquote",[n("p",[t._v("Redis 还支持 Bitmaps 和 HyperLogLogs ，它们实际上是基于String基本类型的数据类型，但是具有自己的语义。")])]),t._v(" "),n("p",[t._v("later on ...")]),t._v(" "),n("h3",{attrs:{id:"_2-2-streams"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-streams"}},[t._v("#")]),t._v(" 2.2. Streams")]),t._v(" "),n("p",[t._v("later on ...")])],1)}),[],!1,null,null,null);s.default=e.exports}}]);