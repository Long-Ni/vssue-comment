(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{437:function(t,a,s){t.exports=s.p+"assets/img/thread_state.a646883e.png"},438:function(t,a,s){t.exports=s.p+"assets/img/wait_notify.c1110bda.png"},532:function(t,a,s){"use strict";s.r(a);var n=s(8),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("多线程是 Java 最基本的并发模型。")]),t._v(" "),n("p",[t._v("线程做为操作系统调度的最小单元，多个线程同时执行，显著提高了程序的执行性能。但是对线程的不当管理很容易造成其他的问题。")]),t._v(" "),n("p",[t._v("将通过一下内容介绍 Java 多线程的基础：")]),t._v(" "),n("ul",[n("li",[t._v("线程及线程的构造")]),t._v(" "),n("li",[t._v("线程的状态")]),t._v(" "),n("li",[t._v("线程间的通信 —— 等待/通知机制")]),t._v(" "),n("li",[t._v("ThreadLocal 变量")])]),t._v(" "),n("p",[t._v("目录：")]),t._v(" "),n("TOC",{attrs:{"include-level":[2,4]}}),t._v(" "),n("h2",{attrs:{id:"_1-线程简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-线程简介"}},[t._v("#")]),t._v(" 1. 线程简介")]),t._v(" "),n("h3",{attrs:{id:"_1-1-上下文切换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-上下文切换"}},[t._v("#")]),t._v(" 1.1 上下文切换")]),t._v(" "),n("p",[t._v("并发编程的目的是为了更高效的使用 CPU，从而使程序运行更快。但是启动更多的线程就会面临更多的问题，最显著的就是上下文切换。")]),t._v(" "),n("h4",{attrs:{id:"_1-1-1-上下文切换是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-上下文切换是什么"}},[t._v("#")]),t._v(" 1.1.1 上下文切换是什么")]),t._v(" "),n("p",[t._v("CPU 通过给每个线程分配 CPU 时间片来实现多线程处理。")]),t._v(" "),n("p",[t._v("时间片是 CPU 分配给各个线程的执行时间。由于时间片非常短（一般是几时毫秒 ms），所以 CPU 通过不停的切换线程执行，让我们感觉多个线程是同时执行的。")]),t._v(" "),n("p",[t._v("CPU 通过时间片分配算法来循环执行任务，在任务切换前会保存上一个任务的状态，以便下次切换回这个任务的时，可以再次加载这个任务的状态。"),n("strong",[t._v("任务从保存到再次加载的过程就是一次上下文切换")]),t._v("。")]),t._v(" "),n("h4",{attrs:{id:"_1-1-2-减少上下文切换的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-减少上下文切换的方法"}},[t._v("#")]),t._v(" 1.1.2 减少上下文切换的方法")]),t._v(" "),n("p",[n("strong",[t._v("过多的上下文切换会导致性能问题")]),t._v("。")]),t._v(" "),n("p",[t._v("根据 Tsuna 的测试报告，每次上下文切换都需要占用 CPU 几十纳秒到数微秒的时间。这个时间对 CPU 来说相当可观，特别是上下文切换次数较多的情况下，很容易导致大量的时间耗费在线程状态的保存和恢复上，进而缩短了程序真正运行的时间。影响多线程执行效率，导致平均负载升高。")]),t._v(" "),n("p",[t._v("减少上下文切换的方法：")]),t._v(" "),n("ul",[n("li",[t._v("无锁并发编程：将数据 ID 按照 Hash 算法取模分段，不同的线程执行不同的数据。")]),t._v(" "),n("li",[t._v("CAS 算法：Java 的 "),n("code",[t._v("Atomic")]),t._v(" 包使用 CAS 算法更新数据。")]),t._v(" "),n("li",[t._v("使用最少线程：避免创建不需要的线程。")]),t._v(" "),n("li",[t._v("使用协程：在单线程中实现多任务调度，并在单线程中维持多个任务间的切换。")])]),t._v(" "),n("h3",{attrs:{id:"_1-2-线程是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-线程是什么"}},[t._v("#")]),t._v(" 1.2 线程是什么")]),t._v(" "),n("p",[t._v("现代操作系统运行一个程序时，就会为其创建一个进程。例如，启动一个 Java 程序，操作系统就会创建一个 Java 进程。")]),t._v(" "),n("p",[t._v("现代"),n("strong",[t._v("操作系统调度的最小单位是线程")]),t._v("，也叫轻量级进程，在一个进程里面可以创建多个线程，这些线程拥有各自的计数器、堆栈和局部变量等属性，并且能够快速访问共享内存的变量。")]),t._v(" "),n("p",[t._v("一个 Java 程序从 main 方法开始执行，然后按照既定的代码逻辑执行，看似没有其他的线程参与，但实际上是有 main 线程和其他多个线程同时运行，最基本的：")]),t._v(" "),n("ul",[n("li",[t._v("main：主线程，程序入口")]),t._v(" "),n("li",[t._v("Reference Handle：清除引用的线程")]),t._v(" "),n("li",[t._v("Finalizer：调用对象 finalize 方法的线程")]),t._v(" "),n("li",[t._v("Signal Dispatcher：分发处理发送给 JVM 信号的线程")])]),t._v(" "),n("h3",{attrs:{id:"_1-3-为什么用线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-为什么用线程"}},[t._v("#")]),t._v(" 1.3 为什么用线程")]),t._v(" "),n("p",[t._v("正确使用多线程，能够带来显著的好处：")]),t._v(" "),n("ol",[n("li",[t._v("更多的处理器核心，提高程序执行效率。")]),t._v(" "),n("li",[t._v("更快的响应时间，提升用户体验。")]),t._v(" "),n("li",[t._v("更好的编程模型，使开发人员专注于问题的解决。")])]),t._v(" "),n("h3",{attrs:{id:"_1-4-线程优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-线程优先级"}},[t._v("#")]),t._v(" 1.4 线程优先级")]),t._v(" "),n("p",[t._v("线程分配到时间片的多少决定了线程使用处理器资源的多少，而线程使用到 CPU 资源的多少决定了线程的优先级。")]),t._v(" "),n("p",[t._v("在 Java 程序中通过一个整型变量 "),n("code",[t._v("priority")]),t._v(" 来控制优先级，范围 1～ 10，可以通过 "),n("code",[t._v("setPriority(int)")]),t._v(" 来修改优先级，默认是 5。优先级越高，分配的时间片越多。")]),t._v(" "),n("blockquote",[n("p",[t._v("不同的操作系统，对线程优先级的响应不同。Mac OS 可能会直接忽略优先级，所有 Java 优先级均为 5（通过 jstack 命令查看）。")])]),t._v(" "),n("h3",{attrs:{id:"_1-5-守护线程-daemon-thread"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-守护线程-daemon-thread"}},[t._v("#")]),t._v(" 1.5 守护线程（Daemon Thread）")]),t._v(" "),n("h4",{attrs:{id:"_1-5-1-守护线程是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-守护线程是什么"}},[t._v("#")]),t._v(" 1.5.1 守护线程是什么")]),t._v(" "),n("p",[n("strong",[t._v("守护线程是为其他线程服务的线程")]),t._v("，是一种支持型线程。")]),t._v(" "),n("p",[t._v("在 Java 程序中，就是由 JVM 启动 "),n("code",[t._v("main")]),t._v(" 线程，"),n("code",[t._v("main")]),t._v(" 线程启动其他线程。当所有线程运行结束，JVM 退出，进程结束。")]),t._v(" "),n("p",[t._v("如果有一个线程没有退出，JVM 进程就不会结束。所以必须保证所有线程都能及时结束。")]),t._v(" "),n("p",[t._v("但是，有一种线程目的就是无限循环，比如监听程序状态的线程。如果这个线程不结束，JVM 进程就无法结束。")]),t._v(" "),n("p",[t._v("问题是，由谁负责结束这个线程？然而这类线程经常没有负责人来负责结束它们，但是其他线程结束时，JVM 进程必须结束，怎么办？")]),t._v(" "),n("p",[t._v("答案是守护线程（Daemon Thread）。")]),t._v(" "),n("p",[t._v("在 JVM 中所有非守护线程都执行完毕后，无论是否有守护线程，JVM 都会自动退出，结束 JVM 进程。此时，守护线程自动销毁。")]),t._v(" "),n("blockquote",[n("p",[t._v("⚠️守护线程不能持有任何需要关闭的资源，例如打开文件等，因为 JVM 退出时，守护线程没有任何机会来关闭文件，这会导致数据丢失。")])]),t._v(" "),n("h4",{attrs:{id:"_1-5-2-守护线程的创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-守护线程的创建"}},[t._v("#")]),t._v(" 1.5.2 守护线程的创建")]),t._v(" "),n("p",[t._v("在调用 "),n("code",[t._v("start()")]),t._v(" 方法前，调用 "),n("code",[t._v("setDaemon(true)")]),t._v("，把该线程标记为守护线程。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDaemon")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("⚠️守护线程需要在线程启动之前设置，不能再启动之后设置。")])]),t._v(" "),n("h4",{attrs:{id:"_1-5-3-守护线程的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-守护线程的作用"}},[t._v("#")]),t._v(" 1.5.3 守护线程的作用")]),t._v(" "),n("ul",[n("li",[t._v("事件监听")]),t._v(" "),n("li",[t._v("定时任务")]),t._v(" "),n("li",[t._v("心跳检测")]),t._v(" "),n("li",[t._v("GC 回收")])]),t._v(" "),n("h2",{attrs:{id:"_2-线程基本方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程基本方法"}},[t._v("#")]),t._v(" 2. 线程基本方法")]),t._v(" "),n("h3",{attrs:{id:"_2-1-线程的构造"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-线程的构造"}},[t._v("#")]),t._v(" 2.1 线程的构造")]),t._v(" "),n("p",[t._v("在运行一个线程之前，首先要构造线程对象。")]),t._v(" "),n("p",[t._v("线程属性参考以下 Thread 构造方法（有删减）：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadGroup")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" stackSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessControlContext")]),t._v(" acc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" inheritThreadLocals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NullPointerException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name cannot be null"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前线程就是新创建线程的父线程")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" g"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 daemon、priority、contextClassLoader、")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// inheritThreadLocals属性设置为父线程的属性")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("daemon "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isDaemon")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priority "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPriority")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("security "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isCCLOverridden")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contextClassLoader "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContextClassLoader")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contextClassLoader "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contextClassLoader"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inheritedAccessControlContext "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" acc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessController")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContext")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" target"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPriority")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("priority"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inheritThreadLocals "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inheritableThreadLocals "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inheritableThreadLocals "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInheritedMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inheritableThreadLocals"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Stash the specified stack size in case the VM cares */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分配栈内存大小")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stackSize "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stackSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分配一个线程 ID")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextThreadID")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("至此一个可运行的线程构造完成，在堆内存中等待运行。")]),t._v(" "),n("h3",{attrs:{id:"_2-2-创建线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-创建线程"}},[t._v("#")]),t._v(" 2.2 创建线程")]),t._v(" "),n("p",[t._v("两种方式：")]),t._v(" "),n("ol",[n("li",[t._v("继承 Thread 类")]),t._v(" "),n("li",[t._v("实现 Runnable 接口")])]),t._v(" "),n("h3",{attrs:{id:"_2-3-线程-start-启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-线程-start-启动"}},[t._v("#")]),t._v(" 2.3 线程 start —— 启动")]),t._v(" "),n("p",[t._v("其他线程通过调用该线程的 start() 方法，启动该线程。")]),t._v(" "),n("blockquote",[n("p",[t._v("start 方法的含义是：调用 start() 方法的线程告诉 JVM，只要线程规划器空闲，应立即启动调用创建的线程。")])]),t._v(" "),n("h3",{attrs:{id:"_2-4-线程-interupt-中断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-线程-interupt-中断"}},[t._v("#")]),t._v(" 2.4 线程 interupt —— 中断")]),t._v(" "),n("p",[t._v("其他线程通过调用该线程的 interrupt() 方法，中断该线程。")]),t._v(" "),n("p",[t._v("其他线程通过调用该线程的 isInterrupted() 方法，判断该线程是否被中断。不会清除中断标识位。")]),t._v(" "),n("p",[t._v("也可以调用静态方法 Thread.interrupted() 方法，判断该线程是否被中断。会清除中断标识位。")]),t._v(" "),n("blockquote",[n("p",[t._v("仅仅设置线程的中断标识位，并不会停止线程。")])]),t._v(" "),n("h3",{attrs:{id:"_2-5-线程的过期操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-线程的过期操作"}},[t._v("#")]),t._v(" 2.5 线程的过期操作")]),t._v(" "),n("p",[t._v("以下对线程的 3 个操作已经标注为过期，不建议使用。")]),t._v(" "),n("p",[t._v("suspend() 暂停线程、resume() 恢复线程、stop() 停止线程")]),t._v(" "),n("blockquote",[n("p",[t._v("不建议使用的原用：")]),t._v(" "),n("p",[t._v("在 suspend() 方法调用后，线程不会释放已经占有的资源（比如锁），而是占有资源进入睡眠状态，容易引发思索的问题。")]),t._v(" "),n("p",[t._v("在 stop() 方法调用后，不会保证线程资源的正常释放，因此导致线程状态不确定。")])]),t._v(" "),n("h3",{attrs:{id:"_2-6-线程-yield-让出-cpu-资源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-线程-yield-让出-cpu-资源"}},[t._v("#")]),t._v(" 2.6 线程 yield —— 让出 CPU 资源")]),t._v(" "),n("p",[t._v("yield() 方法，表示资源放弃当前已经获取的 CPU 资源。如果 CPU 资源不紧张，则会忽略这个操作。")]),t._v(" "),n("h3",{attrs:{id:"_2-7-线程-sleep-睡眠"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-线程-sleep-睡眠"}},[t._v("#")]),t._v(" 2.7 线程 sleep —— 睡眠")]),t._v(" "),n("p",[t._v("Thread.sleep(long) 方法，使当前线程进入休眠，暂停执行。休眠时不会放弃已经获得的锁。")]),t._v(" "),n("p",[t._v("建议使用 TimeUnit 类替换 sleep() 方法，它提供了更好的封装。")]),t._v(" "),n("p",[t._v("TimeUnit.SECONDS.sleep(long)")]),t._v(" "),n("p",[t._v("TimeUnit.MILLISECONDS.sleep(long)")]),t._v(" "),n("h3",{attrs:{id:"_2-8-线程-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-线程-join"}},[t._v("#")]),t._v(" 2.8 线程 join")]),t._v(" "),n("p",[t._v("在线程 B 执行时，join 某个线程A，会使当前线程 B 进入等待，直到线程 A 执行结束或者到达指定的时间，从 join 方法返回，线程 B 继续执行。")]),t._v(" "),n("p",[t._v("响应超时的两个方法："),n("code",[t._v("join(long millis)")]),t._v("、"),n("code",[t._v("join(long millis, int nanos)")])]),t._v(" "),n("h3",{attrs:{id:"_2-9-线程安全终止"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-线程安全终止"}},[t._v("#")]),t._v(" 2.9 线程安全终止")]),t._v(" "),n("ol",[n("li",[t._v("线程结束生命周期，正常执行完毕")]),t._v(" "),n("li",[t._v("捕获中断信号关闭线程")]),t._v(" "),n("li",[t._v("使用 volatile 开关控制")])]),t._v(" "),n("h2",{attrs:{id:"_3-线程的状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-线程的状态"}},[t._v("#")]),t._v(" 3. 线程的状态")]),t._v(" "),n("h3",{attrs:{id:"_3-1-线程的状体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-线程的状体"}},[t._v("#")]),t._v(" 3.1 线程的状体")]),t._v(" "),n("p",[t._v("Java 线程在运行的生命周期中可能会处于 6 中不同的状态，在某一时刻，线程只能处于其中一个状态。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("状态")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("New 初始状态")]),t._v(" "),n("td",[t._v("表示线程被构建，但还没有调用 start() 方法")])]),t._v(" "),n("tr",[n("td",[t._v("Runnable 可运行状态")]),t._v(" "),n("td",[t._v("Java 线程将操作系统中的就绪和运行中两种状态统称为 “可运行”")])]),t._v(" "),n("tr",[n("td",[t._v("Blocked 阻塞状态")]),t._v(" "),n("td",[t._v("表示线程阻塞于锁")])]),t._v(" "),n("tr",[n("td",[t._v("Waiting 等待状态")]),t._v(" "),n("td",[t._v("表示当前线程需要等待其他线程做出一些特定动作（通知、中断）")])]),t._v(" "),n("tr",[n("td",[t._v("Timed_Waiting 超时等待状态")]),t._v(" "),n("td",[t._v("区别于等待状态，该状态可以在指定时间自行返回")])]),t._v(" "),n("tr",[n("td",[t._v("Terminated 终止状态")]),t._v(" "),n("td",[t._v("表示当前线程执行完毕")])])])]),t._v(" "),n("blockquote",[n("p",[t._v("可以使用 jstack 工具查看代码运行时的线程状态信息。")]),t._v(" "),n("p",[t._v("先使用 top 命令定位到 Java 程序对应的进程 ID，然后再键入 "),n("code",[t._v("jstack $ID")]),t._v(" 即可查看线程状态信息。")])]),t._v(" "),n("h3",{attrs:{id:"_3-2-线程状态转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-线程状态转换"}},[t._v("#")]),t._v(" 3.2 线程状态转换")]),t._v(" "),n("p",[n("img",{attrs:{src:s(437),alt:""}})]),t._v(" "),n("blockquote",[n("p",[t._v("⚠️")]),t._v(" "),n("ol",[n("li",[t._v("阻塞状态是线程阻塞在进入 "),n("code",[t._v("synchronized")]),t._v(" 关键字修饰的方法或者代码块时的状态，但是阻塞在 "),n("code",[t._v("java.concurrent")]),t._v(" 包中 "),n("code",[t._v("Lock")]),t._v(" 接口的线程却是等待状态，因为 "),n("code",[t._v("java.concurrent")]),t._v(" 包中 "),n("code",[t._v("Lock")]),t._v(" 接口对于阻塞的实现均使用了 "),n("code",[t._v("LockSupport")]),t._v(" 类中的方法。")]),t._v(" "),n("li",[t._v("阻塞线程在同步队列中阻塞。对应 Blocked 状态。")]),t._v(" "),n("li",[t._v("等待线程在等待队列中等待，当等待线程被唤醒后，进入同步队列尝试获取锁。对应 Waiting、Timed_Waiting 状态。")])])]),t._v(" "),n("h2",{attrs:{id:"_4-线程间通信"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-线程间通信"}},[t._v("#")]),t._v(" 4. 线程间通信")]),t._v(" "),n("h3",{attrs:{id:"_4-1-volatile-与-synchronized"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-volatile-与-synchronized"}},[t._v("#")]),t._v(" 4.1 volatile 与 synchronized")]),t._v(" "),n("p",[t._v("多个线程相互配合完成工作，将会带来巨大的价值，这就需要用到线程间通信。")]),t._v(" "),n("ul",[n("li",[t._v("关键字 volatile 修饰成员变量，用来告知程序任何对该变量的访问均需要从共享内存中获取，对该变量的修改必须同步刷新回共享内存。它保证了所有线程对变量访问的可见性和有序性。")]),t._v(" "),n("li",[t._v("修饰符 synchronized 修饰方法或者代码块，用来确保多个线程在同一时刻，只能有一个线程处于方法或同步块中。它保证了线程对代码执行的可见性、有序性和原子性。")])]),t._v(" "),n("blockquote",[n("p",[t._v("可以使用 javap 工具生成 class 文件信息，分析 synchronized 关键字实现细节。")]),t._v(" "),n("p",[t._v("synchronized 实现原理、对象与对象 monitor 详看其他文章。")])]),t._v(" "),n("h3",{attrs:{id:"_4-2-线程的等待与通知"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-线程的等待与通知"}},[t._v("#")]),t._v(" 4.2 线程的等待与通知")]),t._v(" "),n("p",[t._v("一个线程修改了一个对象的值，另一个线程需要感知这种变化，然后做出响应的操作。前一个线程为生产者，后一个线程就是消费者。这种模式实现了解耦，具备良好的伸缩性。")]),t._v(" "),n("p",[t._v("该模式一种简单的实现方式是：让消费者线程不断循环检查对象是否符合预期，若不满足条件时，可使线程睡眠一段时间，然后继续循环。该实现方式的缺点显而易见：")]),t._v(" "),n("ol",[n("li",[t._v("睡眠过长，难以确保及时操作。")]),t._v(" "),n("li",[t._v("睡眠过短，难以降低 CPU 开销。")])]),t._v(" "),n("p",[t._v("另一种实现方式，则很好的解决了这个看似难以调和的矛盾。Java 通过内置等待/通知机制依托于同步机制（synchronized）很好的实现该模式。")]),t._v(" "),n("h4",{attrs:{id:"_4-2-1-等待通知方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-等待通知方法"}},[t._v("#")]),t._v(" 4.2.1 等待通知方法")]),t._v(" "),n("p",[t._v("等待/通知的相关方法被定义在对象的超类 java.lang.Object 上，所以任意 Java 对象都具备这个方法：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("方法名称")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("wait()")]),t._v(" "),n("td",[t._v("使线程进入 Waiting 状态，只有其他线程通知或中断该线程才会从该方法返回。"),n("br"),t._v("调用该方法后，释放对象的锁。")])]),t._v(" "),n("tr",[n("td",[t._v("wait(long)")]),t._v(" "),n("td",[t._v("同上，响应超时。单位是毫秒。")])]),t._v(" "),n("tr",[n("td",[t._v("wait(long, int)")]),t._v(" "),n("td",[t._v("同上，单位可以达到纳秒。")])]),t._v(" "),n("tr",[n("td",[t._v("notify()")]),t._v(" "),n("td",[t._v("通知一个等待线程，使线程从 wait() 方法返回。"),n("br"),t._v("返回的前提是该线程获取到了对象的锁。")])]),t._v(" "),n("tr",[n("td",[t._v("notifyAll()")]),t._v(" "),n("td",[t._v("同上，通知所有等待线程。")])])])]),t._v(" "),n("blockquote",[n("p",[t._v("⚠️")]),t._v(" "),n("ol",[n("li",[t._v("使用以上方式时，需要先对调用对象加锁（同步方法或同步块内使用）。")]),t._v(" "),n("li",[t._v("调用 "),n("code",[t._v("wait()")]),t._v(" 方法后，线程由 Runnable 状态变为 Waiting 状态，线程被放置到对象的等待队列中。")]),t._v(" "),n("li",[n("code",[t._v("notify")]),t._v(" 相关方法调用后，等待线程不会立即从 "),n("code",[t._v("wait")]),t._v(" 相关方法返回，需要调用 "),n("code",[t._v("notify")]),t._v(" 相关方法的线程释放锁之后，等待线程才有机会返回。")]),t._v(" "),n("li",[n("code",[t._v("notify()")]),t._v(" 方法将等待队列中的一个等待线程从等待队列中移动到同步队列中，"),n("code",[t._v("notifyAll()")]),t._v(" 方法将等待队列中所有线程移动到同步队列中。被移动的线程从 Waiting 状态变为 Blocked 状态。")]),t._v(" "),n("li",[n("code",[t._v("wait")]),t._v(" 相关方法返回前提是获得了调用对象的锁。")])])]),t._v(" "),n("p",[t._v("可以看出，等待/通知机制依托于同步机制，目的是确保等待线程从 wait 相关方法返回时能够感知到通知线程对变量做出的修改。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(438),alt:""}})]),t._v(" "),n("p",[t._v("上图中，Wait Thread 首先获取对象锁，然后调用"),n("code",[t._v("wait()")]),t._v(" 方法放弃锁，并进入等待队列。由于 Wait Thread 线程释放了锁，Notify Thread 随后获取锁，执行自己的任务并调用 "),n("code",[t._v("notify()")]),t._v(" 方法，将 Wait Thread 从等待队列移到同步队列中，此时 Wait Thread 状态变为 Blocked 状态。等待 Notify Thread 执行完任务并释放锁之后，Wait Thread 重新获取锁，从 "),n("code",[t._v("wait()")]),t._v(" 方法返回并继续向下执行。")]),t._v(" "),n("h4",{attrs:{id:"_4-2-2-等待-通知经典范式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-等待-通知经典范式"}},[t._v("#")]),t._v(" 4.2.2 等待/通知经典范式")]),t._v(" "),n("p",[t._v("该范式包含两部分，分别针对等待方（消费者）和通知方（生产者）。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("等待方：")]),t._v(" "),n("ol",[n("li",[t._v("首先进入同步方法或同步块，获取对象的锁。")]),t._v(" "),n("li",[t._v("如果条件不满足，调用对象的 wait 方法，释放锁并进入等待队列，被通知后仍要检查条件。")]),t._v(" "),n("li",[t._v("条件满足则执行对应的处理逻辑。")])]),t._v(" "),n("p",[t._v("伪代码：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("条件不满足"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  对应的处理逻辑\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("通知方：")]),t._v(" "),n("ol",[n("li",[t._v("首先进入同步方法或同步块，获取对象的锁。")]),t._v(" "),n("li",[t._v("改变条件")]),t._v(" "),n("li",[t._v("通知等待在对象上的线程")])]),t._v(" "),n("p",[t._v("伪代码：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  改变条件\n  object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("notify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),n("h2",{attrs:{id:"_5-线程变量-threadlocal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-线程变量-threadlocal"}},[t._v("#")]),t._v(" 5. 线程变量（ThreadLocal ）")]),t._v(" "),n("p",[t._v("线程变量（ThreadLocal），它不是一个 Thread，而是 ThreadLocalVariable，即线程局部变量。在多线程环境下，它可以保证各个线程之间的变量相互独立。")]),t._v(" "),n("p",[t._v("ThreadLocal 本质就是变量，一切思考要从变量的角度去想问题，而不是从线程的角度考虑问题。")]),t._v(" "),n("h3",{attrs:{id:"_5-1-threadlocal-基础结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-threadlocal-基础结构"}},[t._v("#")]),t._v(" 5.1 ThreadLocal 基础结构")]),t._v(" "),n("p",[t._v("ThreadLocal 是一个以 ThreadLocal 对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是一个线程可以根据该线程的 ThreadLocal 对象查询到绑定在这个线程上的一个值。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("通过 set 方法设置当前线程的局部变量值")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalMap")]),t._v(" map "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("通过 get 方法获取原先设置的当前线程的局部变量值")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取当前线程")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个线程都有自己的 ThreadLocalMap")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ThreadLocalMap 里保存着所有的 ThreadLocal 变量")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalMap")]),t._v(" map "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前 ThreadLocal 对象实例就是 ThreadLocalMap 的 key")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ThreadLocal 变量的值都是放在这个 Map 中的")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),t._v(" e "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEntry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 Map 里取出来的值就是我们需要的这个ThreadLocal变量")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 Map 是 null，那么初始化")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInitialValue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("通过 remove 方法删除当前线程的局部变量值")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalMap")]),t._v(" m "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("通过 withInitial 静态方法创建一个 ThreadLocal")])])]),t._v(" "),n("p",[t._v("使用示例")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocalTest")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" strLabel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" threadLabel "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        strLabel "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        threadLabel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                strLabel "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"child"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                threadLabel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"child"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保证线程执行完毕")]),t._v("\n            thread"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"strLabel = "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" strLabel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"threadLabel = "')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" threadLabel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("运行结果：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("strLabel "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child\nthreadLabel "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" main\n")])])]),n("p",[t._v("从运行结果可以看出，对于 ThreadLocal 类型的变量，在一个线程中设置值，不影响其在其它线程中的值。也就是说 ThreadLocal 类型的变量的值在每个线程中是独立的。")]),t._v(" "),n("h3",{attrs:{id:"_5-2-threadlocal-原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-threadlocal-原理"}},[t._v("#")]),t._v(" 5.2 ThreadLocal 原理")]),t._v(" "),n("p",[t._v("在 ThreadLocal 类中有一个 ThreadLocalMap，用于存储每一个线程的变量副本，Map 中元素的键为 ThreadLocal 对象，而值对应线程的变量副本。")]),t._v(" "),n("p",[t._v("ThreadLocal.ThreadLocalMap 是一个比较特殊的 Map，它的每个 Entry 的 key 都是一个弱引用。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The value associated with this ThreadLocal. */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Entry")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadLocal")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key 为弱引用，value 依然为强引用。")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"_5-3-threadlocal-内存泄漏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-threadlocal-内存泄漏"}},[t._v("#")]),t._v(" 5.3 ThreadLocal 内存泄漏")]),t._v(" "),n("p",[t._v("虽然 ThreadLocalMap 中的 Key 是弱引用，当 GC 发生的时候，就会自动被回收，但是 Entry 中的 Value 依然是强引用。")]),t._v(" "),n("p",[t._v("只有当 Thread 被回收时，这个 Value 才有被回收的机会，否则，只要线程不退出，Value 总是会存在一个强引用。但是，要求每个Thread 都会退出，是一个极其苛刻的要求，对于线程池来说，大部分线程会一直存在在系统的整个生命周期内，那样的话，就会造 Value 对象出现泄漏的可能。")]),t._v(" "),n("p",[t._v("解决办法："),n("strong",[t._v("当你不需要这个 ThreadLocal 变量时，主动调用 remove()")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"_5-4-java-中的四种引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-java-中的四种引用"}},[t._v("#")]),t._v(" 5.4 Java 中的四种引用")]),t._v(" "),n("h4",{attrs:{id:"_5-4-1-强引用-strong-reference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-1-强引用-strong-reference"}},[t._v("#")]),t._v(" 5.4.1 强引用（Strong Reference）")]),t._v(" "),n("p",[t._v("默认的引用对象都是强引用类型。")]),t._v(" "),n("ul",[n("li",[t._v("如果JVM垃圾回收器 GC 可达性分析结果为可达，表示引用类型仍然被引用着，这类对象始终不会被垃圾回收器回收，即使 JVM 发生 OOM 也不会回收。")]),t._v(" "),n("li",[t._v("而如果 GC 的可达性分析结果为不可达，那么在GC时会被回收。")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" web "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.threadlocal.cn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h4",{attrs:{id:"_5-4-2-软引用-soft-reference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-2-软引用-soft-reference"}},[t._v("#")]),t._v(" 5.4.2 软引用（Soft Reference）")]),t._v(" "),n("p",[t._v("软引用是一种比强引用生命周期稍弱的一种引用类型。一般用来实现内存敏感的缓存。")]),t._v(" "),n("ul",[n("li",[t._v("在 JVM 内存充足的情况下，软引用并不会被垃圾回收器回收。")]),t._v(" "),n("li",[t._v("只有在 JVM 内存不足的情况下，才会被垃圾回收器回收。")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" softReference "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.threadlocal.cn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" web "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" softReference"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h4",{attrs:{id:"_5-4-3-弱引用-weak-reference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-3-弱引用-weak-reference"}},[t._v("#")]),t._v(" 5.4.3 弱引用（Weak Reference）")]),t._v(" "),n("p",[t._v("弱引用是一种比软引用生命周期更短的引用。在使用虚引用时，必须和引用队列关联使用。")]),t._v(" "),n("p",[t._v("在对象的垃圾回收过程中，如果GC发现一个对象还存在虚引用，则会把这个虚引用加入到与之关联的引用队列中。")]),t._v(" "),n("p",[t._v("程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。")]),t._v(" "),n("ul",[n("li",[t._v("不论当前内存是否充足，都只能存活到下一次垃圾收集之前。")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" weakReference "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.threadlocal.cn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("gc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("weakReference"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"weakReference已经被GC回收"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"_5-4-4-虚引用-phantom-reference"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-4-虚引用-phantom-reference"}},[t._v("#")]),t._v(" 5.4.4 虚引用（Phantom Reference）")]),t._v(" "),n("p",[t._v("虚引用与前面的几种都不一样，这种引用类型不会影响对象的生命周期，所持有的引用就跟没持有一样。")]),t._v(" "),n("ul",[n("li",[t._v("随时都能被 GC 回收。")])]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PhantomReference")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" phantomReference "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PhantomReference")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.threadlocal.cn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceQueue")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("phantomReference"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])],1)}),[],!1,null,null,null);a.default=e.exports}}]);